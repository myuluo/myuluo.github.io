<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>弦外玄&#39;Blog</title>
  
  <subtitle>日出而作，日入而息，逍遥于天之间，而心意自得 。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sel4.cn/"/>
  <updated>2018-03-24T09:35:31.562Z</updated>
  <id>http://www.sel4.cn/</id>
  
  <author>
    <name>弦外玄</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Quick_sort</title>
    <link href="http://www.sel4.cn/2018/03/24/quick-sort/"/>
    <id>http://www.sel4.cn/2018/03/24/quick-sort/</id>
    <published>2018-03-24T09:20:09.000Z</published>
    <updated>2018-03-24T09:35:31.562Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">welcome! please enter password.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+0Y2C8nbp9OzNgI+Mjx9y4cQaaEaNNJkkvPrZ9Lz18ZtTXwh7yUI2uf/iOzIWGo35koKjR3Fn9mAqp+DrMhNbMEz1P1UqNlTMoLcYF+zb6X1rmhpvcvU4BUXL5elbXoQw9YxZIPgqOssEnRMLrgAi0hejws7kLgKmtzu+MJemYpDbgXNEm+xS4d1eZAx+YDMrMnYs7vE8BcvMknXwGfa3BoQHQ2VVGxHW8t6puGG0wManaJkhecM6U1551DzLySAgtlU3vvopfysziCxLrwXIO4gRBY32y6HMkDC8Wyz06D4GQdhY3Bi1ndOG2Snya8EO+g6iH1CTNZeu2FohUqa3itGqxS9K+4od5PbYP2VoWWLG4MxLX58a13HsnUoNIpebWmdXuWGP7ROatH5NpcT3dF6Ury2GFJ25ji0/OqfuNHWdvdSFyKhx03BirSq4thH6X5Pdv4CoVYBvzN5FEsC5eXolibkPDMswmFjHA43ZQyzM2kpy6GyATaP1xZuRdVE53o4tTYSUdnowi+Fh6VopaGCCm0sNZmYv2PctlwwwlbYaeqHAgxDWHvrBoiRxfhpU0G2fdRx6c78BL5QCd8nweI4G5ttdkrpi2cy6s9ij98fgH6U/Gdejv6NNycapKfLgLRNlT37cVYoffTI7/1I0k0IAU3aS/bob/IifbjyGnbYjscnOXEskGDS9I3HbZBCGXmOXFB1uIAYr5xfxDPq7hMTC0s6pY7/rDqPfp9r+f5etB7IeS8FPWB/GHqvL5l1Na+2e+Me7rxRw+XEyS0CS2mR7j6Eh+AnVK3lXOtPJqU55WtJEwNRsvU3qT9z53RYDpp9LgseypnHR5RmdDP04W3tcw4SloQr97V5YUF/UWXg1o3vuWepJ2fESV/qMzBudDt4mtGRxAlysK79riaF76SwdialeeH6PRoYMsmN3q8rj9aJkGr4+GcV/BwUJryQAq7UpzFdfvY984zMgJxwUbJra6e9HvMFF+XgJfmI264XHYFsNnSpxpt66iN/cydytvVqc4CR1pSY/EjvL+yl3IMBJhddRD0aR/UcrluLdJdown8qt3YH8Pa5cTTW5Fjh12bwk3VhsyWDOeuLH3/Olnhi2rQLLXprlIqdreeGpctMfZUcx1OLtLaYrrTNr5qUpWQyVAt0+Zd1nTSDcQw8HOW02dhObyS9Qa1zqoXUjpjSolTOzzahZ4Tv5b9uE2e87CJb4Cf96s4f9OXpRO5OEnzTFR4XHe41d4BFbnF8sPx7RCDXbrtVA36zt32Kq8bFpE84r9kMfJOWGcCKYkCJ0z6u1aSI6wfBg0BWHFrvhI9ux9B+gT/BvHfdL3X+rKkGSRm5Oda1FWF7Desr08cJBxmCKFltC1/GKV9/GrPuR5kEH6bR6MZcOwTq/QT+DHWfC8TMAjz7SWQURktzbots2tKQBYHw7XrhEBdr40RYjv0mLBItHigDY70rTrRA1h6H4mzd+wZEPgwNtH38PDsmniMwuiz7glmngcX4a/BCN5CBgIjsRR4fhplwK9T+HnwL5HSaVfEICfVlDxlN830MSbPInUqXMHrseKTil6wj5oFSIZCcZIBPbPlUZmLqFOIGLSrE3tNt9GjslKjkpaTpEmd9uS5pRYZnmNMEdAZ95L76U/rEX9hgj0K2K3VgtqJcbTlyPQjX2OzkZL9H37rmOJQpRuv6LfpdRaRIwZeji5Q1k6HtMijZIiM1OE7ivQAup/ZdLCdjFUfF+ee0FGzTKTDuzltUA+pT8Pxfe4e0qxVuZuMwqX5EUlItt1i8bIe0OuEaSDcRRNwL6BGAHeCLSjJxMowFoL5QfEbG9fHkuOSoM351xFKF0oIPjaeIksrW23zIl55hMrPFPjf7VYtO1Gd2Wn8ZsiJgnPUS+ZvYBG0Vvv+b/m4V442e+jU99tEF3hxF6kOAQ32+IJqA5toeVegRCDfXwnjI11skAMWsDEiwnaKPk8HeCyMckKbxsM9NugxkZ/q6AeDEiiugmvsfYZDNcmD5J0B90dBISNc5psC7ItjSxG55hnCtX/98m07i302ZMeREvWovVVTIIQsC8WFpL5tN8FlPgTqim4aegeRDka4wnHIUspyC0hpgl0LQrJlqleiRFNBOZ4JUdkE7OXWLNpb7eyhfu+nY53TM9s+9I4j892Lty7SQTaxdggrnqoe4WXclcBa170xSUVM141jsXzl5xrn13VN5li/MNzyPN3kd2XrBTDv3kvqkgfeA2bANfDZu7ofQsjCCTimSBZLiqcrKD0tAPoeE0tuq+173TjTY+QsvdYwqpH9K4flcIryFBu52+vBJAV4VTyBcSB+M+l6vTp7am19JDFMj7kCtoJdhQGPZt5akjUwzRD3JzOO4QtWY/YyCyX4/3On1uNSJcocKuX6xNGxJn/UM+tV5feS++BoKfKx5WyOKvgtZ91JjXt+V9DvOyyoaay7LcXB32mczh0aNjJOG+8j1TevImo6doGJc46pIW0HzPcoMWB14kiZscB27MTIFJ1dozWowF/xxzx3sB0J1Zjx2m+rKASbUNSP6nOeYLbYQEN9WXoYiymGmdHzaMmjL+5FH3l5ZwbrOt0WcaiOqJZMzGLvu9uDH8ytC8BRRr+CAfCS2RDtn6kEIphGfaV4B4RHBQJk/lIBwhMId75a54LKOhjTKfiyQ7U5CA6aZL0T4GCl1vjGdIsmHAGWV7VyafL0ab/kiRq2sybQDhq8h/5NwrlyIDlVEDAHDjEkmUB86fNbQzbODL1GjZd6HnLGx5o9S4e2tekzcggypjFK4+GDc/rWsC8TU5Xwp6C2YSCqTKENvsF4gHLIb8LjWLsTCfp9wqoEqEPCBJRBCQGA1SdktPskl8xX5ZO6EvCNN3/3cwdRbTIxJ7LFiumvXdNOdaqv54W95CeNb1ZW9heYNPZLDWlQyGun/aDun/nrUxdrtTT5omPGOD+DUEhulq6fLaVprPyk9PRmkKYUnQXlHRk/1plqXYi0ueuukWu29RbO6w7JzQoKHzm7juwJf9ooOiD7UdiRUaLWAaG/KfLHYTa0Vc2oHPa+5r+++uOSEREGDbykLFW69Xm+aq+X/bUgYtTjoVSdeoQYGoeU/MhzdwMyP/PzexlLWJbb4rECy1kZOk7YaFjB7/evIAVY8qDY4KiELYE7EA+BiyczyFunr41LCn8w9/r/los0aTZkosr4nDkBeQP4jVb9mH4Mj3m8u8qwYjpUrRBr4lNtMlt0REQ/fh3+6aed07hrfTgDtajwWWSo/Cbgkd+/NgzjtunQA+mbPsBcPn2svTUHHFcaS8nNCo8x9BLLVkuqn1UQFhVeBVLTYf9PdrFybH4mMo2szdz0clrS4nw7ADCLSwwhvIb5PL4CaGsbuC2/oQxDhpfPgQ/mG9LzFsbOEsGKcgNLNte58cZJNxPBiIggsY3t4ak8InFDdERfxwzwXELq63MRLJxjXFEFosxPT9Vagz+jwOCXkkMzU93oigwU4gP8j58dBuVJaxEPSeX1Xhyad5rcWzI46QBMUv4gR6i793Xfb7fko8YBlVKwYSZNoOLgyeELjuYQwWI6OtrHKXBq0CnR4WlXxqxlSjaLMCK8BiQrMdmEwOwEuRVzxzH66rR6PXSn/DubQrMpx7rlKmCLQnjyeSbMy8aWVFqxGT1BBGZ/Rmel42ffKi54DCXpyBy0YOfzOccnstThcntLsoxWs3QPEE9jnWSSU1jg7nZdaOuggflEcv/SiU4h8t6CgMu1UC/aP6ZtNOeMiRBT911Y9usEsj7tRgh49l3kP3k/7GaJpf+Ja2Kz85g//Cpif8xzdBev5ikksxJ5RcElLj8kkK+2ugps7inU30eByhhLoLKsa7euWrJteUUotsWyUKmm4+qy7vkg3P+CbtwnAOCAcln37KYyR2pj+2lRR10RJHZL3hD0WzHs+BFTNg3pBkudOfHT/6/32EjqHXjMhHnA8JWZgQUWNT2/HyS5Y5648lPBkaW0ucX/FC7bVPhVhv6zFIHaEFK/5KfcX7ggl/B7JF+HTCOPqYehz01mMM6RoGjVLoPVQQ08mrUGgtDIe0UaxwGu4+kHb5TiImJ42FAhv3IaB1DOJl2GPE0Nr8J5qx9isnjOavtPUrEbCJmUR+KJEH4GZ9tnfox8XOdZ3Me5BvmOEkL9yaGI9pTesi+X56FdPaw+stBBx18gbSgsy79kC6z3ZiAVyWoxsx+qVxn5k1/CkmQU7sWy/+8402k10k2wlb0fh6Rd3MkfAfLp7nCxk6Rn6e0FbhGyxnls6Oiu0GKIizjQXEhVWhfhavZbsyDzW+es1DdnQMuiJYkij4ntanrmLnr3cxFz1Un3K5qM3beMUHRa3RImk7gz04l8xYkInLpqQykU8GG43ENbaRZJmPcsaKn18Ry9kxuB1XjF8KEUQ5HTvOUpDByVsO/EKMTuvOiypvw4B01MY2fzVIf5bDqX0w6s1abPCuC/le0LickUtgqSUiOFNRq4nEu9wjAoF+4MnHjChdaP+mWk0i9zRSNJefIU6iacuPgKRsrCVcP8OykMcSAQx6Zqf2bqOGjSNOurYux+7YdSoVuOA6fRHfGAsKgNbhvJS9oYL3n0FV7XlIIITWwnIOioiV1/5zd0Ml2TjvJgX1taUqFmCA/Xqg9sCWwpNBrixVm+d3WIYrVIlbIL3VQqMTN61epjNY6SX552tU3/c6G3KJn355GSo13zm6bqR6uGuwu03sCfrrzt+p7BuYYmIAIfl6HOwCsNVBUMmegy4y7qkFWZoUwfNSyACdp4x9OInnd/RvX33PauWQKdjKXiPFj5SLA0sQcWvkgqyfa74RyfTABaE7ChR2UCoPdmJn6sMr8iefvN872YIiiIRDpbPq456NAg980oMR78iaGDK3NIe29/nIUwUXCBP6xVzyRNp3en8bfU0zT8Mo+w46Bax+hf8LZd+kgFv6/h+yZ2pRHGm0OkwtWXyqTKo7dWvB1/Kbeconpi2iKxR825bsW5LGJMLlAAayCrx0fXBEmb/hGqUN9RV4GkT+xSXg57oKL6GPKg1AcdYpBoLNo0SGDmN1Te1l5Nf0Y5VNWRJbme/9hxPV1ZoHQQn/Cfl7vWpj1TiwBXNIj/DJzA4QygYE+CaC1gC7t0unxD5dNt081U45/yy62NLy3UoEEkK579dTwIB3URqJdNFAqHA/j64RDzooEbqfB1UwkKu8nKwp30cnn28oFqo7mex/nzP2lT4tZviEw+4l+HkcY/oY+ZVUgW4pwInBJNUbyWCZbEQSeDIHu4FZiPk85AxFg66I/SOjY8wYNApBfnUn1SafxK9sP3pnd7YLCbnEzTh2VYYPkSSDoEc+rS0moQXDBscFUreGDoHOOWBEwRRAlcbLmuOj7GHeY82jUcfhuvIxtHBYZZXiGv4E2zEilyPc1AecZACVk2yxMCj2vhINw426g3fpB1S52SeyoezG+c7RQ3w1R2DVVwANk2yo3v+rESd/MOdoe0Fel4gkmiu1feQ2+YPnPBOoDHzTOeCZ6ooiQN7r0S8Fn/sHJfRIsKmxhnwJwlmQe0XCpRmGuNrIrrhy7mem7x28AB/bezRt7MTDC12ULBrg+VqAer0Sc7lXNyjurhbIjGNQALkw9gSs9mjRnW2LlWhfdwK911sN8P7Ou057E1wyms/AkUneyTjfGxrzAWgpnfKwU0pvDo7Cmwh3SmGjDeZ2El5VzbCmoh2PeoGN+7RYwjge1hiXu5ElrUltHAWMP0BWL/0qD8TCaTL/glFvNDaz7qzEqPhVjM/S9+LbpOZguhuxuEQL8Y6d41YvIrVB2+8tqEAFDxxcmWUVtcc05untzJQ304TBWM7s7E2jK6KuWr1RDR/Z1bZHtsU6N4AUHdlWq/A7eIC5f3oEVeu0xhC+Xoi3lQg2MmJAZx750oG3aLn7qNGz0stVsp7hpzdw8IvDEwKaIDwOqJtP7dRsiqXIKs69Xr9O33x0gdDdqO0fdsTB9UirzgQpIrwvgRHykRciUkfcj2747DNThZeOIjAK9pScDUTDMgzDn4Tbvo1oe5oQMepOOGpQKU2OJ55yWogOUVy7KxXJOxojpXtw84a9suN74kRGCOGzp9PCP81z6hyn3OXjZc2h65PxqpabX9NiLBsozD1n1NqtvIRH4EDDHkoQZaAtY6NEC1Q6jYXoGYYH7n3ga920awR57WlwEq7CY8c8OV2/MMQ2oCHmJoINMjElBzylluyvhGzszRYY8SZMooV/dO06Xyp0hVqt87DQM8S0thO7dOo1a31R+3F0sV71EEH++ektU7Kh6nuytUo9MANEFb9AxyD2y34WhFudbwoJH6nKlhpqbUXIiTSwrgKA+Io3YvBKS+SgMoReSiqGCifWDI050bzE+fy0/1yMsaep0IVRbGsXK754l+eW3fyK0/SJRURIkuMxt/5IeS6s3EHo/yCa8upOtvpTdal1p+a5Nri3Y13hyb4+dxTBQj8n5uRfdehOx8olOacLsj7gaZuGpFoSWVAXjrpjihjum+bk6wqyEz7NC8A2pqeGzvIF4FCf/9Ns5Q/Ehdk1Ostk0zm147v8JAJ3Uep9Jn5+E+LifxXI3cTg9xrEJtUQVO9VWS+1f0iiMcO5ALNC2UjYbTlAF4IaQru7W++MjLcpYfwoBuSdZIGE+D3BbSiGSjPjxXlEbDAEZIvxBv+IRSWt/AQXnrA8TZy9mJ0C98ITGwPFHvtiKJeSp24SNONU1FE4RYR4vsKTjvaL9yfAkspp5Je1vx89II3GpuqYW6+mxCkaVd13VGiFTchh7avjYZZhuXQ2Cle1dtmGuklO0KuZOPD63rDK+qaLVCAIfbFaYM5WM0WpHKhlF6mOj70/0Mc/LYxUPvWtpi9mdps3m9N25/WfX9oOeBNOTF/AxvFkgWtbYBWiee0RZaziRST3YpPGLulWInOXGiG4RtQAhwTCteXkdi0XbE0RJuub1PHYR90jrWcc4yJbjG8cXDQeKGi/p/jKdlQJlv+258YVl1dSourixTntBxyaShpEXDAlJpekZFK7o/h6xaXJEw3AD091NWbUEvTKAHaPaVJeVSsZhuM/lVRksFgrkV/WDakP1UzWQIn0XmizQOV85cgkzQCjRheK0ZSgLwldPhTwXkQi+UEB0lYc63IdGpYguXXNJ/ZhcpyGzdQYG0f7Spbfa9G1K+BoN1cCh40grU/tAJ5Z7NDFa8vgmrLQaO3GZKMvuREPQEuSPAuV17fggWXeh7MKh6Mw+Wbx2yZxLNmtorUbTiXvusLsEzsXDSFMfIduifvDkB0SiwcFSwXfd36Pi4WO4FFFh8O38XjXVXXfzgA0TMNGHfYf2OSUwSHH/YmdegY1cr4x2mEl0+GciR+Ewe1yrWjvKGnm6XfYuYBJRDJL2lIFzdSlwyxoPeI2xC8nqojBWiH3p9BpRzxr1epMAC7HiG/RpculDZ+5BHIhKT+/hGZUJT9MhivZTaU0k3oG89KafIj4SkkPHlxn5tkhfy/xxAErLkJi0kSybPEwoywlQxNG3b/CVj5i4pKdWKAiaEDse8bHKUd7dO9pzZH8N7Agrq7yeszZALaav/mWMmfCRfpfdTVEnhQshh9Uh7T1L5jIGzpbwAnSvsHfPsLXTYQOH4meaM+CL97vQB9uKEhOo7+RAtJqAOEYqMHeSrJfnE3FV2iHzw4qy6Kt+gEza6Xlz0THr1ILKtEUt8zsgvUNRKO+BlutXuHAn7V9YVYbJ94yWJc7ZUti+O+NHM1M+YuHtFuEFaB6l//JuN1Jei4bs6Mi3jx5D5L89Ty8KWiVPADTgfh5JCoKo+JJG6MLRlZsP7VTcSZ03N+mvxBvD+8Y5H+wuZFGa5wUyK+4aHR1tiS8Z8QYJ302QVS7vYZ38mgNQEvvF3GqHnaGACMNsjAlKwSvLXh30Gbogp6Qr+JIaQDzXcvJ+GacdyLP1Xp6iNHC2BZx2K8wpBW2d0j8Eg8xMDcesRlFmfptJEOnYfRt9T4s5TcBrnOl0ehZeE5/Z94QZKzzVIxAMLf4z29vbdHnp7zX6NtjftOUwOyZ6DqrJWL7v+yz9S0JfXLlvAVGZH4CFxTdtBafvOVRkCq5kxGK0vtN2Q6qkGo11+E0CdOYfhpvFkndx9My/+UfHJzyzguZnSR9L6Wk9UtH/XX7lLev7of3izK+klXwD1tXWUDLiKUoGixC/DYCCxX3K+OWh51/2i5qdXLYQxO9g+Ladp1qOb1fA3PrDbfohUDb4D+swEUjDtzWXUzWVu6UIsXb8M/GhhP0/AySyGpteZslnOhUva7GHZC64RGSh9SAr3UOFFWirqWiTeDo3nm50WpUue0rmGHud5rgqOYErMsjL5lze9Jk45n0zk7YShLNZuq54G3GfhPsB0L7MhFiipapfmRxVfsifN2YRBPmV2sTrjo1TB9OtBbuwOX2BZM4Nfh4OGXQiMubrtDnlhHXL8JddPMIcGuPCx+XwfaNYhHv0ifGVmH5oElmwxzw25CfGN39pfItl139bgYXv1SBTEMsglgIwXLtxWuzYOvDmgF1YCzEKexe0vYOAqOXfW9FOnSx/iTnV86DG650am/w/PZxTGBW29X6wZ6GQyCzYlWHeexltZGVHEDrNvqQHK5I5qm4nAo7ULOyLanh6qB3zv2ocBZBKA6oUUwHXcGs8DWZWL1fOS+o7nZJfk/8OwkK0rYAEwUce8ZaHNXd70KLB5TkWGg2JtRHtPIbPQMIa+VeNHS3XndcSPOmu1ySalasMDmlYxBTLf8EEPktRKr9FfkrWYrQTEmUWSGiZwt33lcD7XEcbaDO6v37Hgo2TFVTVfyPd/tunbkDraHaz3O/iye1dTZOs51R1M37WGcLUIjPHfNiZmUBs7K+SCYorrPbZ9HVFy5xB+NymyjC2klPAbUORKNdyClteJMdaPmnmuoe+Cs2peeRlDXUocGevc/oXvvsjYxJv9+zuINx33JqKU2Y/LAgG6G/KL+/tz9DhEWZOitM8uBeRrZ3vspNK+lRUtRInYxe0QS5g47oM+g7poLi6iC+AU2QI+sggdQ+nkXMC8SLK9vYO3UM1row8Nm3gjqxW6h+fxdhBaGDeUIl2ilyNNRtUVYqulTdylNs08qgv7U7DuVQWuXZ6Fdh2n8T3ACokzTmcY6AwllE1OUVEy7yYdPTP8xYCyMESy2ONHP2hNy6lIgFfKlI+R7ZCeLtJy91446FfUK80iPiz5XUkRbFrqvStAq0egHAGS/s33L7WQX45pkuWZGZXL0yboI6YMMfVUcThrwCFZlIAWbUxNfK2eSCSsRceaO5r3bx8K9svo96g8MxYmf/MCdMildHInixOyBWtmsQvR8FT/ziRxU4cbYK8q8xqamHnysW8aIgxk8F01YwwkmWdJ2buWTS0XcL5wGiLMvtr+J9D7yEiJNNkH8XTk4/D7t7pmzkdYrAn9Fjtjjot0pu8UV57hQ9bbuEpB+YUIfV2shx0RD7kAKWHfVWnn9LKdZOGDUtZL21MZlfpQl/7yaFLC57XmY7FhbW0/hdHh4HLOB3JlCUPpV7EaDN+dKG+kQLuIJVPRzZ9bfUwxQ+JEUq9JJRh9FZghg+cmeH0twm07z8PC0kBxNEUyjB9b4+GftgraltrO98RxP/rTl49TbvvPDujjeGou/n/f2BPvE60qVlEvAP1MEzdH3XY83mvqW3M4j5LLjvXp1dURYadQzxfEU+O8csn2p+VZTtDI5DO8AWDyFccdX4Ia1DPk8doSVSUc1x6XoYMKqTNeQ8Zh1YIELSS6shWA+fFVgiBYQJIbcuOh2AgBS4iLIussf0pmdaf4sunmk6zzKC9D0iARPECxmSkHdfad72LzdXPHXuluxp/MA5KCaWoDc0HYtkBq7UPvrrwH1cv8o3j1c6EaOZpUk3T7c8y1FEYNezVnZEB9fyVoI3A1/3AyUZZiD/KjUCCoA0G8aVi1f+Ey5dGOxh+1ghFM0Ti0e5lpHBYcSYcbSxBLeYtkKyzwiyafJPEke0HMTXjuU2/C1PZ0Q8YoaFXs7qpAv350oKrCG3wOxL4TqX2oHdS0Wl9aVIgX6duk8cp1WGbmc7zU+3XVX6nEKXjb6YQO8ctzg2Tc5vNk8BpDtKpU8TbTZ0l9mwM0vzeaGCWK99EONT7X0zwsa8qpDnLWLPS27k4jnOAGyFop1LZljF8AXG24da1EaT6Yg5Z9dCqzpJcKY1VKBflbys7l1Oq2yulhRWu5/+zVX8C8/6wAUekDr2YxOiKOgnyJIOvcVE2Z3onofup9uv9stF1tZ9y/2ERzsiCvTWp6jP/+ksV3ES8ErJuitgZ4U5whHWyYpiacnPl49FJgVBEV1XjExq6tF1mTFYpXh/Gucg04nDhaYBHn51xWjdBdDsWWUtUqOcD6hOJfiQdjIjyuKdwwYS78zNeMXyooJTSeQzBHHYdtjI6MKN78ih0kVCkXmqiZxDx7qzK0KdKwcNv/5U2FB9GDhzdAzhrt3f9NP2oiHsGASR86NLmyLyG0fGSKIQcrWZfG/kAG3W2X+Vk32D05yHSd+oaGx0tuso00VWikL/YnRpuuzbketQItSSwtuuir/KN0Wxex7KDO4Jv8HUFv5srBSK23Sgbf7AqiIgF9n7PTyW8m9LXgf00kgt8HG1/pB4/lemnL05hBFS1JTxnrFRe+x43znqx2ORWJRNKr8dbwlv5opUjmp3ZrMfylh2Ny5Xe/KEFUEzUrofYaWDzHfHgiuch9dJFFbwIrFeoG6wJVVOozcOEMIgZvc6RAmnusvY18m8Jb57bjdvpIUwpJ/3W69X4XowFLG4FCuwWyvJlbf/jN4UOi67JtT33KQ1XCc2PL3YMDIv63AyUfLdy17WGhFb3lL9nW8N6EaPIlq+K8kwbfi760ynN+L/7a7MPhahu0XEagTfW0NIJxMfIJMETTmJ9+eia4IyhOjmxvKCFWHaa13GJECIjRokQiNo9Q4z7QdFSG+M4hhvWWypyMvK30ytPXo5kM0+rSjKnABkKQl7ypqpa56eoz90zo5WpKklAxm60kLH3491XC2cphlLJBY7s7IGepuz7zWZJZ9V4nKP/AAEDf8xla1uQ13lL8EJRJSiucHPdU19bjDhTa95Xwok2omr9d5kOlXqdAJ2hvepvk2361ZZWZDoseVeH7JD0UUlaGvFvqD+MggJy9BRboVZg83TIMhCxuKkENpi03yASP5PRVI2OKEXg48Y85aM3W0hWrH8JRQnxS3sAztLgMgMB8gMMFYngGRP3Wi3+8Lw9dXMt53whyPGeJR1uNvqOssH7tSd4UL+X1t4TcPmsZSOfy0w9CxP3sBmQgWO7RHZWaD85xh8wL245vkhvLnt4gD3r9iCGqyuAFDceuyX6985LqTnkZRu7/+uzzG/h55Q0SF9r7szyyVQ5Sx7wzxpBxQ7DNZnHQqZh3VENEXs3z3BEOmFSvH+SmWUtNsMbpBtGq78QOAG0x0/FO4Qagz6rS8/ytXLL+fwWsq4LwZGf2eZM9JicYCNGbIzZOgiokgmso8KU4f3tSZiAKXiS+mgIeXALvGXkyS587kKnB0u7WL6qpaV4Q6SCcjOPJsUrYxuZzPBPrVW0mGhySM8bDA5+nKIaUEABrb98XiDSyPCLnabmpH3koKMWFJE8j6ooTioupjVx6N1WrqEC3u7sZw37iJXr/Ed0O3fXmMuGd4hKgwBmbcyVUUYDZPv69f5H/AvoU/GI2zHqjg+Tq2HH+tiWIg8eQPHPuFnt+8AQUsNoFFtlV9jA2pO1gbflQVM1LHX0JKuVICziaQyUSuKuVf7qBIXrRg91NloBouS3bYwMLps96BrRcAITxOStEJVWZLMNhzoicGN7YOTQuSucHpeuyuhvZR5tNrmxHrOtb6oUugwfI9DtNLHp9EPXY9M5BQzkE7x8SHq3wZPw35klcWZZUTTkeSulOdbY3G3VyrONGJCTSlUsw1v2Ypdkox34Am/nsP39XlkwdInzAOVMoSSGd4PBAz2PiIHFZKj2v2VwZgQlCi+D2WoIJsaY5ueVqbhfLUrWYIaScBixpIXps6/5nd7Sp899VVjdhZX3ciYrZUrefRGj1eP/irhJDjZWv/WN4I/m2fQzBVGFezdO9jIhWod0A86W0ajOyfii8pcvrT5FwNYx+MhH9uDPH54N63xwbDDbDSOZJwNPA7x41abv2Njt7ilrhPqsVoCXcl6bnmiZCJu7Kf3F6Z3dd/UAbsLq13viFpDWNz+siGuRZ2dyr58MeSco8Hkt2bmfMzusM5pJ9B4dUqRNZs2QrPZFpCsnEq4ueJ+NSwW/Hkx2287BEgm7LQP1Awg8UAJAIF2P/kcDA1uy2LNdIemtl3A78RzTqGQtJ4DzHaWwJ7HVGV0nMm3rRQUAvWcTguQkTx/Aa66qOgS0ibImlIolm9RRNa5rVlQk6f1+kmysaQ5Q7TdvB2SgULxTjpJZIS8UHxPmLNutiiTwHsQDqBeIBVO3ft05ddWsqOedQiD5HhIc8dX23NA3mNiGJQzb9vsoV2JOdkt4FUFKoRrnC8xQV5lJiRsxdp3mgzitJFGnx4kJqXQxdvaIWQu9p9MNdL/8hId/ny4pcDHuwAYbd+xjapa07aketEh4Cvx6QTqHYepIwo1RnW27CtiKgsCeURa1ZlNwZRRXfS8KjqlFkRMNyLwWra0keEGihqEw5pBMBzMazZP/XsxJbXKKq6Pk6BpAD9HENy3FIFHnkq16bUmbQQ1qk3X6rjmdKCP0h5daRszm7td1BEVlodjuPXU3PCIX4Dzju8mD08eI59RCK7FrO34hgpO7U/HhyFpVWDUSnrWLiqvkGir8xnIJ9B9Ns8JXJvkEKEQ5itSflJ/6OYWLeKPrkBO8qPiSfNqpeznFTU9/5IRBRvWrbiMUmiXcGMT/tV+MYQAM4q5lsg8b4SFrrQRQ1xS/6AUX4vibQ1PMBq9SZ3MaLhzGbXK3c7EBrdb1DXup8FZVJNH7uHdGxaRxDVLWrxhvl8XVgK8b6Ed3/5aGXuU88S0iutwQJvvByjoV17sLapNDqB+hym+0D2GHZqdcRj2xQAQuNzr3e4NdJg58dDPhtiGYBduV2BFLn4T/OCsGCukYv9Xrm2ogeHf5q+LuvJ9mm8XKRc40g2+L7Whe3tWfTlO8r+elY8BVib3JafZHXNQg0Vm/eYzE44zpx9BcRyayPHZyRaIrCo397bhgFxOWjk+q0dnfsTTmewHVHS6+oYDZorgRW7yiA3WNP0kfa2NUwJ/fOSs2cSVYR7sTZqInVaqibg2c4AIgRU2jkAVl8t9FRDnMphJBHi8ghGLkqGTQUXG17udG93PZ6MgeTcMP9e/AePrnefjO4m6Eq+uYSEOpgtjgECqpDbZkHNflVEIkC5uIbBEpIrc5rNkRW/3ouxPe6HWaiSXkCK8ZIEBmvhY8vD8p5CrzZ6rvT9PIoHcYSApRd7DAFUUUI5hOhxOWxn2xAm6+PkEzEvIVQFhboLb9J7NbR9YsIJrk+ELZGK2cDIgMY6HeQwY1QNSKjNf5hMzLTtmBYxpynACh2pm+Q6pcg/wKYjt1dPV/eYeWPmPGroHKVrAM8Wh96qBVpkMuMpUpfo21idM3LFVxcGNJRufOLgMSmlSUSHnyhP0opmvCbrVcfI8Ny289jhDz9wZO/IQtSTfEhPDHCHivWx4hqJ5OGAH/XjFu0jE8ACoyxCNQZZTYbR3C67EmrqNDkl3By8z0zBhl7H5U+uC6UnhMlVl3+l55VI4Y8YHB3MUPj0EeoVlpCBslzLv7yRlKLi4jTGd26PfzrWIeXKpwOVKiVo6qI4Efr38z3PHqIVPYh/5WMzLuBWB2Kpc6ARnmMkv6X/PF7wtDl3SLiOHSWpPwMv/aQD9PBIoakHJPyb+9oEojspbqzoS94L75bjzFIDmlA9xK0+8Hgasgy7OgPiKhg2bnBNMPi+ZbWVKKPbSuDRdUsX6ljLWSHYQdcJV12ywxPXdf6h9+26ei0P2q4db97xnWW8vTCYfmBMcYBh948gITKXMn3Dg6IdFDZif79zCNJQWw3ySefhdZVBkMyvxWHm7Q3T1q1lawxs+WZsbBr+Cx+XTKaS4H30nRZU5UKQ9upjgHUEUh4NlXQQ73aE3pMzxp29PzSE/8pjYtgELO2xTiVzA5Ufmlci12gYaLMnw0ZgABdoP3ndeu5R4GXv7bJQnnVoXCOARBhAuCu7kDthOVzG4kxo3whj7FZmCwbFTvof1yPJwOkQpxhdOTWwI8RuDp0nX4/sWgvy15s+oY9211NsjbTMFRWU8SnVorfs9vGfUKm7STxGH/ER4vmHtgEnhYBzohnIcQRALHvrEFHHnGZjsZV7U2ou7fPpC2v4JPTh1XwYmfeBDIbSZbgQMaclqsi6xVHP0Dlp7p84EWaQpokTSvhgwNzBeLVQ9x7S2lAG5qgiOnP7nvZ3Xu/l1NQyIz2rmbM2A+MJq6fhjxZt8TROcVrroTB+7eLaQnHF440+lhulEoVmYA9IPuvtVgddqfSLBdxVj5FgJ3jSdkSZj8+XBG4ZPE1wuDGTcwKKkdGNI0PrRzTqUCJ19wrfDLpy7FUgdMoAtgG2ecfFJOYB53gqw5aso2hPoYazkNNEVIq6SDD8gSCEgtFfBnfy3Af7bqZavU3RXFaHu9ozFUlRNwamFaEa1wjAaPXnTM7h5qHHJsX99HkBLJvUXBGdfOh6vOK+Pxym1Q8mx7DcM6k8D1vHE8nmcfqrleWIxFkhdDGRE6j27hETTd+Pttm5HZoNJF+49fveS5Ma0MzCVfPWg4hJxGgJKX3pVWZov4jRf1JnWJsutaiNeivz4eRx5zBQvw8NF3Jp4Y4z3v4UTTgWyZn/lS733W3zQBPg== </div>]]></content>
    
    <summary type="html">
    
      enter password to read.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>二分查找题</title>
    <link href="http://www.sel4.cn/2018/03/23/Find-Peak-Element/"/>
    <id>http://www.sel4.cn/2018/03/23/Find-Peak-Element/</id>
    <published>2018-03-22T23:46:10.000Z</published>
    <updated>2018-12-16T16:26:36.297Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>A peak element is an element that is greater than its neighbors.<br></blockquote><br><a id="more"></a><br>Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.</p><p>The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.</p><p>You may imagine that num[-1] = num[n] = -∞.</p><p>For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = num.size();</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>==n)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end  = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(start&lt;=end)&#123;</span><br><span class="line">      mid = start +(end - start) / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span>(mid == <span class="number">0</span> || num[mid]&gt;=num[mid <span class="number">-1</span>])&amp;&amp;</span><br><span class="line">      (mid = n <span class="number">-1</span> || num[mid] &gt;= num[mid <span class="number">-1</span>]))&#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(mid &gt; <span class="number">0</span> &amp;&amp; num[mid <span class="number">-1</span>] &gt; num[mid]) &#123;</span><br><span class="line">        end = mid <span class="number">-1</span>;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        start = mid + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;A peak element is an element that is greater than its neighbors.&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>seL4Capability</title>
    <link href="http://www.sel4.cn/2018/02/07/seL4Capability/"/>
    <id>http://www.sel4.cn/2018/02/07/seL4Capability/</id>
    <published>2018-02-07T06:14:48.000Z</published>
    <updated>2018-12-16T08:52:08.888Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">welcome! please enter password.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      enter password to read.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RSAlgorithm</title>
    <link href="http://www.sel4.cn/2018/02/04/RSAlgorithm/"/>
    <id>http://www.sel4.cn/2018/02/04/RSAlgorithm/</id>
    <published>2018-02-04T14:55:06.000Z</published>
    <updated>2018-02-22T01:07:12.426Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">welcome! please enter password.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      enter password to read.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Tensorflow</title>
    <link href="http://www.sel4.cn/2018/02/04/tensorflow/"/>
    <id>http://www.sel4.cn/2018/02/04/tensorflow/</id>
    <published>2018-02-04T13:23:32.000Z</published>
    <updated>2018-02-04T14:50:20.628Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">welcome! please enter password.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      enter password to read.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ReinforcementLearningAnIntroduction</title>
    <link href="http://www.sel4.cn/2018/02/03/ReinforcementLearningAnIntroduction/"/>
    <id>http://www.sel4.cn/2018/02/03/ReinforcementLearningAnIntroduction/</id>
    <published>2018-02-03T10:00:17.000Z</published>
    <updated>2018-02-04T13:22:31.372Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">welcome! please enter password.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      enter password to read.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bitcionAboutSites</title>
    <link href="http://www.sel4.cn/2018/02/03/bitcionAboutSites/"/>
    <id>http://www.sel4.cn/2018/02/03/bitcionAboutSites/</id>
    <published>2018-02-03T09:41:23.000Z</published>
    <updated>2018-02-04T13:22:31.372Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">welcome! please enter password.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      enter password to read.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SmartPointer</title>
    <link href="http://www.sel4.cn/2018/02/03/2018-02-03-smartPointer/"/>
    <id>http://www.sel4.cn/2018/02/03/2018-02-03-smartPointer/</id>
    <published>2018-02-03T07:09:39.000Z</published>
    <updated>2018-02-04T13:22:31.372Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">welcome! please enter password.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      enter password to read.
    
    </summary>
    
      <category term="program language" scheme="http://www.sel4.cn/categories/program-language/"/>
    
    
      <category term="C++11 SmartPointer" scheme="http://www.sel4.cn/tags/C-11-SmartPointer/"/>
    
  </entry>
  
  <entry>
    <title>手机解锁方案</title>
    <link href="http://www.sel4.cn/2018/02/01/2018-02-01-AuthToken/"/>
    <id>http://www.sel4.cn/2018/02/01/2018-02-01-AuthToken/</id>
    <published>2018-02-01T09:48:26.000Z</published>
    <updated>2018-02-04T13:22:31.368Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>你是谁?<br>怎么证明你是你,而不是别人冒充的?<br>如果有人企图冒充你,我将让你的痕迹永远消失!<br></blockquote><br><a id="more"></a></p><h2 id="Gatekeeper-architecture"><a href="#Gatekeeper-architecture" class="headerlink" title="Gatekeeper architecture"></a>Gatekeeper architecture</h2><ul><li><p>GateKeeper daemon<br>  C++ binder service 包含平台独立的逻辑和相应的GateKeeperService java 接口.</p></li><li><p>GateKeeper HAL API<br>  一个libhardware API 借口和实现模块</p></li><li><p>Hardware GateKeeper<br>  是GateKeeper HAL API的基于TEE的实现</p></li></ul><p>LockSettingsService 会通过 Binder 发出一个请求，该请求会到达 Android 操作系统中的 gatekeeperd 守护进程。gatekeeperd 守护进程会发出一个请求，该请求会到达此守护进程在 TEE 中的副本 (Gatekeeper)。<br><img src="/images/gatekeeper_flow.png" alt="GateKeeper 数据流程">GateKeeper 进行身份验证的概要数据流程</p><p>gatekeeperd 守护进程会向 Android 框架 API 授予访问 HAL 的权限，并且会参与向 Keystore 报告设备身份验证的活动。 gatekeeperd 守护进程会在自己的进程中运行，与系统服务器隔离开来。</p><h2 id="什么是SID"><a href="#什么是SID" class="headerlink" title="什么是SID"></a>什么是SID</h2><p>SID是一个随机生成一个 64 位数.是由TEE在用户注册新的凭据时生成的.</p><p>在设备恢复出厂设置后首次启动时，所有身份验证程序均会做好接受用户通过凭据注册的准备。用户必须先通过 Gatekeeper 注册一个 PIN 码/解锁图案/密码。该首次注册会随机生成一个 64 位的用户 SID（用户安全标识符），该用户 SID 将用作用户的标识符以及用户加密材料的绑定令牌。该用户 SID 会以加密形式绑定到用户的密码，成功通过 Gatekeeper 的身份验证后，会相应生成 AuthToken，其中包含用于该密码的用户 SID。</p><p>每当用户注册新密码时，如果未提供之前的密码，系统就会使用加密伪随机数生成器 (PRNG) 生成一个用户 SID。这称为“不可信”重新注册，在正常情况下，Android 框架不允许进行这种操作。如果用户提供了之前的有效密码，便会发生“可信”重新注册；在这种情况下，用户 SID 会迁移到新密码句柄，从而保留绑定到它的密钥。</p><p>注册密码时，用户 SID 会随密码句柄中的密码一起接受 HMAC 处理。</p><p>用户 SID 会写入到 verify 函数返回的 AuthToken 中，并且会同所有与身份验证绑定的 Keystore 密钥相关联（要详细了解 AuthToken 格式和 Keystore，请参阅身份验证）。由于对 enroll 函数的不可信调用会更改用户 SID，因此此类调用会使绑定到相应密码的密钥无法再使用。攻击者在控制 Android 操作系统后可以更改设备密码，但在此过程中，他们需要破坏掉受 Root 保护的敏感密钥。</p><h2 id="AuthToken"><a href="#AuthToken" class="headerlink" title="AuthToken"></a>AuthToken</h2><ul><li><p>AuthToken 是在用户被验证时候,由Gatekeeper创建的.</p></li><li><p>gatekeeper ,fringerprint,keymaster在TEE中共享的HMAC key 用来签名 AuthToken.每次重启,创建一个新的Key,来避免重放攻击.</p></li></ul><p>时间戳是用来确认自设备启动到用户最后一次被认证的时间和防止AuthToken的重放攻击.</p><table><thead><tr><th>域</th><th>类型</th><th>必需</th><th>说明</th></tr></thead><tbody><tr><td>AuthToken Version</td><td>1byte</td><td>是</td><td>下方所有字段的组代码。</td></tr><tr><td>Challenge</td><td>64bit unsigned integer</td><td>否</td><td>用于防范重播攻击的随机整数，通常是所请求的加密操作的 ID。目前由交易指纹授权使用。如果质询存在，AuthToken 将仅对包含该相同质询的加密操作有效。</td></tr><tr><td>User SID</td><td>64bit unsigned integer</td><td>是</td><td>不重复的用户标识符，以加密形式绑定到与设备身份验证关联的所有密钥.</td></tr><tr><td>Authenticator ID</td><td>64bit unsigned integer,按网络字节序保存</td><td>否</td><td>绑定到特定身份验证程序政策时使用的标识符。所有身份验证程序都有自己的 ASID 值，它们可以根据自己的要求更改该值。</td></tr><tr><td>Authenticator Type</td><td>64bit unsigned integer,按网络字节序保存</td><td>是</td><td>0x00 代表 Gatekeeper, 0x01 代表 Fingerprint</td></tr><tr><td>Timestamp</td><td>64bit unsigned integer,按网络字节序保存</td><td>是</td><td>自最近一次系统启动以来已经过的时间（以毫秒为单位）</td></tr><tr><td>AuthToken HMAC(SHA-256)</td><td>256-bit blob</td><td>是</td><td>除 HMAC 字段以外所有字段的已加密 SHA-256 MAC。</td></tr></tbody></table><h2 id="AuthToken-HMAC"><a href="#AuthToken-HMAC" class="headerlink" title="AuthToken HMAC"></a>AuthToken HMAC</h2><p>每次设备启动时，都必须生成 AuthToken HMAC 密钥并由所有 TEE 组件（Gatekeeper、Fingerprint 和 Keymaster）共用该密钥。因此，为了加强对重播攻击的防范力度，每次设备重新启动时都必须随机生成 HMAC 密钥。</p><p>关于与所有组件共用此 HMAC 密钥的协议是一项依赖于平台的实现功能。在任何情况下都不能将该密钥设为在 TEE 之外可用。如果 TEE 操作系统缺少内部进程间通信 (IPC) 机制，需要通过不可信操作系统传输数据，那么传输操作必须通过安全的密钥交换协议进行。</p><h2 id="如何从keymaster获取AuthToken-key"><a href="#如何从keymaster获取AuthToken-key" class="headerlink" title="如何从keymaster获取AuthToken key"></a>如何从keymaster获取AuthToken key</h2><ol><li>在HAL Open的时候,Keymaster TA通过CA APIs被打开.Keymaster TA的名字是keymaster</li><li>指纹HAL通过requset和response结构体,发送KEYMASTER_GET_AUTH_TOKEN_KEY命令给Keymaster TA.</li></ol><h2 id="身份验证流程"><a href="#身份验证流程" class="headerlink" title="身份验证流程"></a>身份验证流程</h2><ol><li><p>用户提供 PIN 码、解锁图案、密码或指纹。LockSettingsService 或 FingerprintService 通过 Binder 向相应的守护进程（gatekeeperd 或 fingerprintd）发出请求。指纹身份验证在指纹请求发出后异步进行。</p></li><li><p>守护进程将数据发至其副本，后者生成 AuthToken：</p><ul><li>对于 PIN 码/解锁图案/密码身份验证，gatekeeperd 将 PIN 码、解锁图案或密码哈希发送到 TEE 中的 Gatekeeper。如果 TEE 中的身份验证成功，TEE 中的 Gatekeeper 会将包含相应用户 SID（已使用 AuthToken HMAC 密钥签名）的 AuthToken 发送到它在 Android 操作系统中的副本。</li><li>对于指纹身份验证，fingerprintd 会监听指纹事件并将数据发送到 TEE 中的 Fingerprint。如果 TEE 中的身份验证成功，TEE 中的 Fingerprint 会将 AuthToken（已使用 AuthToken HMAC 密钥签名）发送到它在 Android 操作系统中的副本。</li></ul></li><li><p>守护进程收到经过签名的 AuthToken，并通过 Keystore 服务 Binder 接口的扩展程序将 AuthToken 传递给 Keystore 服务。 （gatekeeperd 还会在设备被重新锁定以及设备密码发生变化时通知 Keystore 服务。）</p></li><li><p>Keystore 服务将 AuthToken 传递给 Keymaster，以便使用与 Gatekeeper 和 Fingerprint Trustlet 共用的密钥验证 AuthToken。Keymaster 会将令牌中的时间戳视为最后一次身份验证的时间，并根据该时间戳做出密钥发布决定（以允许应用使用相应密钥）。</p></li></ol><h2 id="错误请求次数限制"><a href="#错误请求次数限制" class="headerlink" title="错误请求次数限制"></a>错误请求次数限制</h2><p>验证PIN和password的失败次数和对应延迟验证的关系<br>如下:</p><ul><li>[1, 4] = 0 sec</li><li>[5] = 30 sec</li><li>[6, 9] = 0 sec</li><li>[10, 30] = 30 sec</li><li>[31, 140] = (30 <em> (2 ^ ((x - 30) / 10))) </em> 1000 sec</li><li>[141, inf] = 1 day</li></ul><p>GateKeeper 必须能够安全地限制对用户凭据进行暴力破解的尝试次数。如 hardware/libhardware/include/hardware/gatekeeper.h 中所示，HAL 能够返回一个超时（以毫秒数计）。超时旨在通知客户端在超时过去之前不要再次调用 GateKeeper；如果有待处理的超时，GateKeeper 不应处理相关请求。</p><p>Gatekeeper 必须先编写一个失败计数器，然后再验证用户密码。如果密码验证成功，则应清除失败计数器。这可以在发出 verify 调用后防止攻击者发起以下攻击：通过停用嵌入式 MMC (eMMC) 来阻止请求次数限制。此外，enroll 函数还会验证用户密码（如果提供了），并且必须以同样的方式对其加以限制。</p><p>如果设备支持，强烈建议将失败计数器写入到安全存储空间。如果设备不支持文件级加密，或如果安全存储空间的速度过慢，实现可以直接使用 Replay Protected Memory Block (RPMB)。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;你是谁?&lt;br&gt;怎么证明你是你,而不是别人冒充的?&lt;br&gt;如果有人企图冒充你,我将让你的痕迹永远消失!&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://www.sel4.cn/categories/android/"/>
    
    
      <category term="gatekeeper keymaster keystore" scheme="http://www.sel4.cn/tags/gatekeeper-keymaster-keystore/"/>
    
  </entry>
  
  <entry>
    <title>zhangyp&#39;Resume</title>
    <link href="http://www.sel4.cn/2018/02/01/2018-02-01-secret-test/"/>
    <id>http://www.sel4.cn/2018/02/01/2018-02-01-secret-test/</id>
    <published>2018-02-01T02:27:56.000Z</published>
    <updated>2018-12-16T08:52:08.896Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">welcome! please enter password.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      enter password to read.
    
    </summary>
    
      <category term="简历" scheme="http://www.sel4.cn/categories/%E7%AE%80%E5%8E%86/"/>
    
    
  </entry>
  
  <entry>
    <title>TLS协议解读</title>
    <link href="http://www.sel4.cn/2018/01/31/1/"/>
    <id>http://www.sel4.cn/2018/01/31/1/</id>
    <published>2018-01-31T13:08:17.000Z</published>
    <updated>2018-01-31T23:51:52.026Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>1.如何验证服务器证书的合法性？<br>2.为什么要用3个随机书生成交换密钥，</blockquote></p><p><br><a id="more"></a><br>TLS有三个子协议，他们被用作节点对记录的安全参数取得一致，去验证他们他们自己，去实例化协商的安全参数，去互相报告错误状态<br>握手协议负责协商一个会话，这个会话由下面几项组成：</p><ul><li><p>会话标识符</p></li><li><p>节点证书</p></li><li><p>压缩方法</p></li><li><p>密码参数<br>指定随机数函数用作生成密钥材料，大块数据加密算法（例如空，AES,等等）和MAC算法（像HMAC_SHA1）。它也定义了密码学属性，像mac长度。</p></li><li><p>主密钥</p></li><li><p>是可恢复的<br>这个标志指示会话能被用作初始化新的连接</p><ol><li>交换密钥参数协议</li></ol><ul><li></li></ul></li></ul><p>在client和server端共享的48字节密钥</p><h3 id="TLS-握手协议"><a href="#TLS-握手协议" class="headerlink" title="TLS 握手协议"></a>TLS 握手协议</h3><p>### </p><p><a href="http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html" target="_blank" rel="noopener">一篇不错的关于TLS的文档</a></p><p>源引<a href="http://blog.csdn.net/dog250/article/details/5717162" target="_blank" rel="noopener">dog250</a><br>不管是客户端还是服务器，都需要随机数，这样生成的密钥才不会每次都一样。由于SSL协议中证书是静态的，因此十分有必要引入一种随机因素来保证协商出来的密钥的随机性。</p><p>对于RSA密钥交换算法来说，pre-master-key本身就是一个随机数，再加上hello消息中的随机，三个随机数通过一个密钥导出器最终导出一个对称密钥。</p><p>pre master的存在在于SSL协议不信任每个主机都能产生完全随机的随机数，如果随机数不随机，那么pre master secret就有可能被猜出来，那么仅适用pre master secret作为密钥就不合适了，因此必须引入新的随机因素，那么客户端和服务器加上pre master secret三个随机数一同生成的密钥就不容易被猜出了，一个伪随机可能完全不随机，可是是三个伪随机就十分接近随机了，每增加一个自由度，随机性增加的可不是一。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;1.如何验证服务器证书的合法性？&lt;br&gt;2.为什么要用3个随机书生成交换密钥，&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android HIDL－快速消息队列</title>
    <link href="http://www.sel4.cn/2018/01/30/FastMessageQueue/"/>
    <id>http://www.sel4.cn/2018/01/30/FastMessageQueue/</id>
    <published>2018-01-30T01:40:49.000Z</published>
    <updated>2018-02-04T13:22:31.412Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Binder机制效率低下，Android HIDL使用FMQ和共享内存来通讯<br></blockquote><br><a id="more"></a></p><p>HIDL 的远程过程调用 (RPC) 基础架构使用 Binder 机制，这意味着调用涉及开销、需要内核操作，并且可以触发调度程序操作。不过，对于必须在开销较小且无内核参与的进程之间传输数据的情况，则使用快速消息队列 (FMQ) 系统。</p><p>FMQ 会创建具有所需属性的消息队列。MQDescriptorSync 或 MQDescriptorUnsync 对象可通过 HIDL RPC 调用发送，并可供接收进程用于访问消息队列。</p><h2 id="MessageQueue-类型"><a href="#MessageQueue-类型" class="headerlink" title="MessageQueue 类型"></a>MessageQueue 类型</h2><p>Android 支持两种队列类型（称为“风格”）：</p><ul><li>未同步队列：可以溢出，并且可以有多个读取器；每个读取器都必须及时读取数据，否则数据将会丢失。</li><li>已同步队列：不能溢出，并且只能有一个读取器。</li></ul><p>这两种队列都不能下溢（从空队列进行读取将会失败），并且只能有一个写入器。</p><h3 id="未同步"><a href="#未同步" class="headerlink" title="未同步"></a>未同步</h3><p>未同步队列只有一个写入器，但可以有任意多个读取器。此类队列有一个写入位置；不过，每个读取器都会跟踪各自的独立读取位置。</p><p>对此类队列执行写入操作一定会成功（不会检查是否出现溢出情况），但前提是写入的内容不超出配置的队列容量（如果写入的内容超出队列容量，则操作会立即失败）。由于各个读取器的读取位置可能不同，因此每当新的写入操作需要空间时，系统都允许数据离开队列，而无需等待每个读取器读取每条数据。</p><p>读取操作负责在数据离开队列末尾之前对其进行检索。如果读取操作尝试读取的数据超出可用数据量，则该操作要么立即失败（如果非阻塞），要么等到有足够多的可用数据时（如果阻塞）。如果读取操作尝试读取的数据超出队列容量，则读取一定会立即失败。</p><p>如果某个读取器的读取速度无法跟上写入器的写入速度，则写入的数据量和该读取器尚未读取的数据量加在一起会超出队列容量，这会导致下一次读取不会返回数据；相反，该读取操作会将读取器的读取位置重置为等于最新的写入位置，然后返回失败。如果在发生溢出后但在下一次读取之前，系统查看可供读取的数据，则会显示可供读取的数据超出了队列容量，这表示发生了溢出。（如果队列溢出发生在系统查看可用数据和尝试读取这些数据之间，则溢出的唯一表征就是读取操作失败。）</p><h2 id="设置-FMQ"><a href="#设置-FMQ" class="headerlink" title="设置 FMQ"></a>设置 FMQ</h2><p>一个消息队列需要多个 MessageQueue 对象：一个对象用作数据写入目标位置，以及一个或多个对象用作数据读取来源。没有关于哪些对象用于写入数据或读取数据的显式配置；用户需负责确保没有对象既用于读取数据又用于写入数据，也就是说最多只有一个写入器，并且对于已同步队列，最多只有一个读取器。’</p><h3 id="创建第一个-MessageQueue-对象"><a href="#创建第一个-MessageQueue-对象" class="headerlink" title="创建第一个 MessageQueue 对象"></a>创建第一个 MessageQueue 对象</h3><p>通过单个调用创建并配置消息队列：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fmq/MessageQueue.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> android::hardware::kSynchronizedReadWrite;</span><br><span class="line"><span class="keyword">using</span> android::hardware::kUnsynchronizedWrite;</span><br><span class="line"><span class="keyword">using</span> android::hardware::MQDescriptorSync;</span><br><span class="line"><span class="keyword">using</span> android::hardware::MQDescriptorUnsync;</span><br><span class="line"><span class="keyword">using</span> android::hardware::MessageQueue;</span><br><span class="line">....</span><br><span class="line"><span class="comment">// For a synchronized non-blocking FMQ</span></span><br><span class="line">mFmqSynchronized =</span><br><span class="line">  <span class="keyword">new</span> (<span class="built_in">std</span>::nothrow) MessageQueue&lt;<span class="keyword">uint16_t</span>, kSynchronizedReadWrite&gt;</span><br><span class="line">      (kNumElementsInQueue);</span><br><span class="line"><span class="comment">// For an unsynchronized FMQ that supports blocking</span></span><br><span class="line">mFmqUnsynchronizedBlocking =</span><br><span class="line">  <span class="keyword">new</span> (<span class="built_in">std</span>::nothrow) MessageQueue&lt;<span class="keyword">uint16_t</span>, kUnsynchronizedWrite&gt;</span><br><span class="line">      (kNumElementsInQueue, <span class="literal">true</span> <span class="comment">/* enable blocking operations */</span>);</span><br></pre></td></tr></table></figure></p><ul><li>MessageQueue<t, flavor="">(numElements) 初始化程序负责创建并初始化支持消息队列功能的对象。</t,></li><li>MessageQueue<t, flavor="">(numElements, configureEventFlagWord) 初始化程序负责创建并初始化支持消息队列功能和阻塞的对象。</t,></li><li>flavor 可以是 kSynchronizedReadWrite（对于已同步队列）或 kUnsynchronizedWrite（对于未同步队列）。</li><li>uint16_t（在本示例中）可以是任意不涉及嵌套式缓冲区（无 string 或 vec 类型）、句柄或接口的 HIDL 定义的类型。</li><li>kNumElementsInQueue 表示队列的大小（以条目数表示）；它用于确定将为队列分配的共享内存缓冲区的大小。</li></ul><h3 id="创建第二个-MessageQueue-对象"><a href="#创建第二个-MessageQueue-对象" class="headerlink" title="创建第二个 MessageQueue 对象"></a>创建第二个 MessageQueue 对象</h3><p>使用从消息队列的第一侧获取的 MQDescriptor 对象创建消息队列的第二侧。通过 HIDL RPC 调用将 MQDescriptor 对象发送到将容纳消息队列末端的进程。MQDescriptor 包含该队列的相关信息，其中包括：</p><ul><li>用于映射缓冲区和写入指针的信息。</li><li>用于映射读取指针的信息（如果队列已同步）。</li><li>用于映射事件标记字词的信息（如果队列是阻塞队列）。</li><li>对象类型 (<t, flavor="">)，其中包含 HIDL 定义的队列元素类型和队列风格（已同步或未同步）。</t,></li></ul><p>MQDescriptor 对象可用于构建 MessageQueue 对象：</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MessageQueue&lt;T, flavor&gt;::MessageQueue(<span class="keyword">const</span> MQDescriptor&lt;T, flavor&gt;&amp; Desc, <span class="keyword">bool</span> resetPointers)</span><br></pre></td></tr></table></figure><p>resetPointers 参数表示是否在创建此 MessageQueue 对象时将读取和写入位置重置为 0。在未同步队列中，读取位置（在未同步队列中，是每个 MessageQueue 对象的本地位置）在此对象创建过程中始终设为 0。通常，MQDescriptor 是在创建第一个消息队列对象过程中初始化的。要对共享内存进行额外的控制，您可以手动设置 MQDescriptor（MQDescriptor 是在 <a href="https://android.googlesource.com/platform/system/libhidl/+/master/base/include/hidl/MQDescriptor.h" target="_blank" rel="noopener">system/libhidl/base/include/hidl/MQDescriptor.h</a> 中定义的），然后按照本部分所述内容创建每个 MessageQueue 对象。</p><p>MQDescriptor.h内容如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2016 The Android Open Source Project</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _FMSGQ_DESCRIPTOR_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _FMSGQ_DESCRIPTOR_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cutils/native_handle.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hidl/HidlInternal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hidl/HidlSupport.h&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> android &#123;</span><br><span class="line"><span class="keyword">namespace</span> hardware &#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> RingBufferPosition;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GrantorDescriptor</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> flags __attribute__ ((aligned(<span class="number">4</span>)));</span><br><span class="line">    <span class="keyword">uint32_t</span> fdIndex __attribute__ ((aligned(<span class="number">4</span>)));</span><br><span class="line">    <span class="keyword">uint32_t</span> offset __attribute__ ((aligned(<span class="number">4</span>)));</span><br><span class="line">    <span class="keyword">uint64_t</span> extent __attribute__ ((aligned(<span class="number">8</span>)));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static_assert</span>(offsetof(GrantorDescriptor, flags) == <span class="number">0</span>, <span class="string">"wrong offset"</span>);</span><br><span class="line"><span class="keyword">static_assert</span>(offsetof(GrantorDescriptor, fdIndex) == <span class="number">4</span>, <span class="string">"wrong offset"</span>);</span><br><span class="line"><span class="keyword">static_assert</span>(offsetof(GrantorDescriptor, offset) == <span class="number">8</span>, <span class="string">"wrong offset"</span>);</span><br><span class="line"><span class="keyword">static_assert</span>(offsetof(GrantorDescriptor, extent) == <span class="number">16</span>, <span class="string">"wrong offset"</span>);</span><br><span class="line"><span class="keyword">static_assert</span>(<span class="keyword">sizeof</span>(GrantorDescriptor) == <span class="number">24</span>, <span class="string">"wrong size"</span>);</span><br><span class="line"><span class="keyword">static_assert</span>(__alignof(GrantorDescriptor) == <span class="number">8</span>, <span class="string">"wrong alignment"</span>);</span><br><span class="line"><span class="keyword">enum</span> MQFlavor : <span class="keyword">uint32_t</span> &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * kSynchronizedReadWrite represents the wait-free synchronized flavor of the</span></span><br><span class="line"><span class="comment">   * FMQ. It is intended to be have a single reader and single writer.</span></span><br><span class="line"><span class="comment">   * Attempts to overflow/underflow returns a failure.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  kSynchronizedReadWrite = <span class="number">0x01</span>,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * kUnsynchronizedWrite represents the flavor of FMQ where writes always</span></span><br><span class="line"><span class="comment">   * succeed. This flavor allows one writer and many readers. A read operation</span></span><br><span class="line"><span class="comment">   * can detect an overwrite and reset the read counter.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  kUnsynchronizedWrite = <span class="number">0x02</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, MQFlavor flavor&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MQDescriptor</span> &#123;</span></span><br><span class="line">    MQDescriptor(</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;GrantorDescriptor&gt;&amp; grantors,</span><br><span class="line">            <span class="keyword">native_handle_t</span>* nHandle, <span class="keyword">size_t</span> size);</span><br><span class="line">    MQDescriptor(<span class="keyword">size_t</span> bufferSize, <span class="keyword">native_handle_t</span>* nHandle,</span><br><span class="line">                 <span class="keyword">size_t</span> messageSize, <span class="keyword">bool</span> configureEventFlag = <span class="literal">false</span>);</span><br><span class="line">    MQDescriptor();</span><br><span class="line">    ~MQDescriptor();</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MQDescriptor</span><span class="params">(<span class="keyword">const</span> MQDescriptor &amp;other)</span></span>;</span><br><span class="line">    MQDescriptor &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> MQDescriptor &amp;other) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="keyword">size_t</span> getSize() <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">size_t</span> getQuantum() <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">int32_t</span> getFlags() <span class="keyword">const</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isHandleValid</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> mHandle != <span class="literal">nullptr</span>; &#125;</span><br><span class="line">    <span class="keyword">size_t</span> countGrantors() <span class="keyword">const</span> &#123; <span class="keyword">return</span> mGrantors.size(); &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">const</span> ::android::hardware::hidl_vec&lt;GrantorDescriptor&gt; &amp;grantors() <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mGrantors;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ::android::hardware::hidl_vec&lt;GrantorDescriptor&gt; &amp;grantors() &#123;</span><br><span class="line">        <span class="keyword">return</span> mGrantors;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">const</span> ::<span class="keyword">native_handle_t</span> *handle() <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mHandle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> ::<span class="keyword">native_handle_t</span> *handle() &#123;</span><br><span class="line">        <span class="keyword">return</span> mHandle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> kOffsetOfGrantors;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> kOffsetOfHandle;</span><br><span class="line">    <span class="keyword">enum</span> GrantorType : <span class="keyword">int</span> &#123; READPTRPOS = <span class="number">0</span>, WRITEPTRPOS, DATAPTRPOS, EVFLAGWORDPOS &#125;;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * There should at least be GrantorDescriptors for the read counter, write</span></span><br><span class="line"><span class="comment">     * counter and data buffer. A GrantorDescriptor for an EventFlag word is</span></span><br><span class="line"><span class="comment">     * not required if there is no need for blocking FMQ operations.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int32_t</span> kMinGrantorCount = DATAPTRPOS + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Minimum number of GrantorDescriptors required if EventFlag support is</span></span><br><span class="line"><span class="comment">     * needed for blocking FMQ operations.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int32_t</span> kMinGrantorCountForEvFlagSupport = EVFLAGWORDPOS + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//TODO(b/34160777) Identify a better solution that supports remoting.</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> size_t <span class="title">alignToWordBoundary</span><span class="params">(<span class="keyword">size_t</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constexpr</span> <span class="keyword">size_t</span> kAlignmentSize = <span class="number">64</span>;</span><br><span class="line">        <span class="keyword">if</span> (kAlignmentSize % __WORDSIZE != <span class="number">0</span>) &#123;</span><br><span class="line">            details::logAlwaysFatal(<span class="string">"Incompatible word size"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Check if alignment to word boundary would cause an overflow.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (length &gt; SIZE_MAX - kAlignmentSize/<span class="number">8</span> + <span class="number">1</span>) &#123;</span><br><span class="line">            details::logAlwaysFatal(<span class="string">"Queue size too large"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (length + kAlignmentSize/<span class="number">8</span> - <span class="number">1</span>) &amp; ~(kAlignmentSize/<span class="number">8</span> - <span class="number">1U</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> size_t <span class="title">isAlignedToWordBoundary</span><span class="params">(<span class="keyword">size_t</span> offset)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constexpr</span> <span class="keyword">size_t</span> kAlignmentSize = <span class="number">64</span>;</span><br><span class="line">        <span class="keyword">return</span> (offset &amp; (kAlignmentSize/<span class="number">8</span> - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ::android::hardware::hidl_vec&lt;GrantorDescriptor&gt; mGrantors;</span><br><span class="line">    ::android::hardware::details::hidl_pointer&lt;<span class="keyword">native_handle_t</span>&gt; mHandle;</span><br><span class="line">    <span class="keyword">uint32_t</span> mQuantum;</span><br><span class="line">    <span class="keyword">uint32_t</span> mFlags;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, MQFlavor flavor&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> MQDescriptor&lt;T, flavor&gt;::kOffsetOfGrantors = offsetof(MQDescriptor, mGrantors);</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, MQFlavor flavor&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> MQDescriptor&lt;T, flavor&gt;::kOffsetOfHandle = offsetof(MQDescriptor, mHandle);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * MQDescriptorSync will describe the wait-free synchronized</span></span><br><span class="line"><span class="comment"> * flavor of FMQ.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> MQDescriptorSync = MQDescriptor&lt;T, kSynchronizedReadWrite&gt;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * MQDescriptorUnsync will describe the unsynchronized write</span></span><br><span class="line"><span class="comment"> * flavor of FMQ.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> MQDescriptorUnsync = MQDescriptor&lt;T, kUnsynchronizedWrite&gt;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, MQFlavor flavor&gt;</span><br><span class="line">MQDescriptor&lt;T, flavor&gt;::MQDescriptor(</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;GrantorDescriptor&gt;&amp; grantors,</span><br><span class="line">        <span class="keyword">native_handle_t</span>* nhandle,</span><br><span class="line">        <span class="keyword">size_t</span> size)</span><br><span class="line">    : mHandle(nhandle),</span><br><span class="line">      mQuantum(size),</span><br><span class="line">      mFlags(flavor) &#123;</span><br><span class="line">    mGrantors.resize(grantors.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; grantors.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isAlignedToWordBoundary(grantors[i].offset) == <span class="literal">false</span>) &#123;</span><br><span class="line">            details::logAlwaysFatal(<span class="string">"Grantor offsets need to be aligned"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mGrantors[i] = grantors[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, MQFlavor flavor&gt;</span><br><span class="line">MQDescriptor&lt;T, flavor&gt;::MQDescriptor(<span class="keyword">size_t</span> bufferSize, <span class="keyword">native_handle_t</span> *nHandle,</span><br><span class="line">                                   <span class="keyword">size_t</span> messageSize, <span class="keyword">bool</span> configureEventFlag)</span><br><span class="line">    : mHandle(nHandle), mQuantum(messageSize), mFlags(flavor) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If configureEventFlag is true, allocate an additional spot in mGrantor</span></span><br><span class="line"><span class="comment">     * for containing the fd and offset for mmapping the EventFlag word.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    mGrantors.resize(configureEventFlag? kMinGrantorCountForEvFlagSupport : kMinGrantorCount);</span><br><span class="line">    <span class="keyword">size_t</span> memSize[] = &#123;</span><br><span class="line">        <span class="keyword">sizeof</span>(RingBufferPosition),  <span class="comment">/* memory to be allocated for read pointer counter */</span></span><br><span class="line">        <span class="keyword">sizeof</span>(RingBufferPosition),  <span class="comment">/* memory to be allocated for write pointer counter */</span></span><br><span class="line">        bufferSize,                  <span class="comment">/* memory to be allocated for data buffer */</span></span><br><span class="line">        <span class="keyword">sizeof</span>(<span class="built_in">std</span>::atomic&lt;<span class="keyword">uint32_t</span>&gt;)<span class="comment">/* memory to be allocated for EventFlag word */</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Create a default grantor descriptor for read, write pointers and</span></span><br><span class="line"><span class="comment">     * the data buffer. fdIndex parameter is set to 0 by default and</span></span><br><span class="line"><span class="comment">     * the offset for each grantor is contiguous.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> grantorPos = <span class="number">0</span>, offset = <span class="number">0</span>;</span><br><span class="line">         grantorPos &lt; mGrantors.size();</span><br><span class="line">         offset += memSize[grantorPos++]) &#123;</span><br><span class="line">        mGrantors[grantorPos] = &#123;</span><br><span class="line">            <span class="number">0</span> <span class="comment">/* grantor flags */</span>,</span><br><span class="line">            <span class="number">0</span> <span class="comment">/* fdIndex */</span>,</span><br><span class="line">            <span class="keyword">static_cast</span>&lt;<span class="keyword">uint32_t</span>&gt;(alignToWordBoundary(offset)),</span><br><span class="line">            memSize[grantorPos]</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, MQFlavor flavor&gt;</span><br><span class="line">MQDescriptor&lt;T, flavor&gt;::MQDescriptor(<span class="keyword">const</span> MQDescriptor&lt;T, flavor&gt; &amp;other)</span><br><span class="line">    : mGrantors(other.mGrantors),</span><br><span class="line">      mHandle(<span class="literal">nullptr</span>),</span><br><span class="line">      mQuantum(other.mQuantum),</span><br><span class="line">      mFlags(other.mFlags) &#123;</span><br><span class="line">    <span class="keyword">if</span> (other.mHandle != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        mHandle = native_handle_create(</span><br><span class="line">                other.mHandle-&gt;numFds, other.mHandle-&gt;numInts);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; other.mHandle-&gt;numFds; ++i) &#123;</span><br><span class="line">            mHandle-&gt;data[i] = dup(other.mHandle-&gt;data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;mHandle-&gt;data[other.mHandle-&gt;numFds],</span><br><span class="line">               &amp;other.mHandle-&gt;data[other.mHandle-&gt;numFds],</span><br><span class="line">               other.mHandle-&gt;numInts * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, MQFlavor flavor&gt;</span><br><span class="line">MQDescriptor&lt;T, flavor&gt;::MQDescriptor() : MQDescriptor(</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;android::hardware::GrantorDescriptor&gt;(),</span><br><span class="line">        <span class="literal">nullptr</span> <span class="comment">/* nHandle */</span>,</span><br><span class="line">        <span class="number">0</span> <span class="comment">/* size */</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, MQFlavor flavor&gt;</span><br><span class="line">MQDescriptor&lt;T, flavor&gt;::~MQDescriptor() &#123;</span><br><span class="line">    <span class="keyword">if</span> (mHandle != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        native_handle_close(mHandle);</span><br><span class="line">        native_handle_delete(mHandle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, MQFlavor flavor&gt;</span><br><span class="line"><span class="keyword">size_t</span> MQDescriptor&lt;T, flavor&gt;::getSize() <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> mGrantors[DATAPTRPOS].extent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, MQFlavor flavor&gt;</span><br><span class="line"><span class="keyword">size_t</span> MQDescriptor&lt;T, flavor&gt;::getQuantum() <span class="keyword">const</span> &#123; <span class="keyword">return</span> mQuantum; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, MQFlavor flavor&gt;</span><br><span class="line"><span class="keyword">int32_t</span> MQDescriptor&lt;T, flavor&gt;::getFlags() <span class="keyword">const</span> &#123; <span class="keyword">return</span> mFlags; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, MQFlavor flavor&gt;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">toString</span><span class="params">(<span class="keyword">const</span> MQDescriptor&lt;T, flavor&gt; &amp;q)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> os;</span><br><span class="line">    <span class="keyword">if</span> (flavor &amp; kSynchronizedReadWrite) &#123;</span><br><span class="line">        os += <span class="string">"fmq_sync"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flavor &amp; kUnsynchronizedWrite) &#123;</span><br><span class="line">        os += <span class="string">"fmq_unsync"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    os += <span class="string">" &#123;"</span></span><br><span class="line">       + toString(q.grantors().size()) + <span class="string">" grantor(s), "</span></span><br><span class="line">       + <span class="string">"size = "</span> + toString(q.getSize())</span><br><span class="line">       + <span class="string">", .handle = "</span> + toString(q.handle())</span><br><span class="line">       + <span class="string">", .quantum = "</span> + toString(q.getQuantum()) + <span class="string">"&#125;"</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace hardware</span></span><br><span class="line">&#125;  <span class="comment">// namespace android</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// FMSGQ_DESCRIPTOR_H</span></span></span><br></pre></td></tr></table></figure></p><h3 id="阻塞队列和事件标记"><a href="#阻塞队列和事件标记" class="headerlink" title="阻塞队列和事件标记"></a>阻塞队列和事件标记</h3><p>默认情况下，队列不支持阻塞读取/写入。有两种类型的阻塞读取/写入调用：</p><ul><li>短格式：有三个参数（数据指针、项数、超时）。支持阻塞针对单个队列的各个读取/写入操作。在使用这种格式时，队列将在内部处理事件标记和位掩码，并且第一个消息队列对象必须初始化为第二个参数为 true。例如：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// For an unsynchronized FMQ that supports blocking</span></span><br><span class="line">mFmqUnsynchronizedBlocking =</span><br><span class="line">  <span class="keyword">new</span> (<span class="built_in">std</span>::nothrow) MessageQueue&lt;<span class="keyword">uint16_t</span>, kUnsynchronizedWrite&gt;</span><br><span class="line">      (kNumElementsInQueue, <span class="literal">true</span> <span class="comment">/* enable blocking operations */</span>);</span><br></pre></td></tr></table></figure><ul><li>长格式：有六个参数（包括事件标记和位掩码）。支持在多个队列之间使用共享 EventFlag 对象，并允许指定要使用的通知位掩码。在这种情况下，必须为每个读取和写入调用提供事件标记和位掩码。</li></ul><p>对于长格式，可在每个 readBlocking() 和 writeBlocking() 调用中显式提供 EventFlag。可以将其中一个队列初始化为包含一个内部事件标记，如果是这样，则必须使用 getEventFlagWord() 从相应队列的 MessageQueue 对象中提取该标记，以用于在每个进程中创建与其他 FMQ 一起使用的 EventFlag 对象。或者，可以将 EventFlag 对象初始化为具有任何合适的共享内存。</p><p>一般来说，每个队列都应只使用以下三项之一：非阻塞、短格式阻塞，或长格式阻塞。混合使用也不算是错误；但要获得理想结果，则需要谨慎地进行编程.</p><h2 id="使用-MessageQueue"><a href="#使用-MessageQueue" class="headerlink" title="使用 MessageQueue"></a>使用 MessageQueue</h2><p>MessageQueue 对象的公共 API 是：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">size_t availableToWrite()  <span class="comment">// Space available (number of elements).</span></span><br><span class="line">size_t availableToRead()  <span class="comment">// Number of elements available.</span></span><br><span class="line">size_t getQuantumSize()  <span class="comment">// Size of type T in bytes.</span></span><br><span class="line">size_t getQuantumCount() <span class="comment">// Number of items of type T that fit in the FMQ.</span></span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">isValid</span>() <span class="comment">// Whether the FMQ is configured correctly.</span></span><br><span class="line"><span class="keyword">const</span> MQDescriptor&lt;T, flavor&gt;* getDesc()  <span class="comment">// Return info to send to other process.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">write</span>(<span class="keyword">const</span> T* data)  <span class="comment">// Write one T to FMQ; true if successful.</span></span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">write</span>(<span class="keyword">const</span> T* data, size_t count) <span class="comment">// Write count T's; no partial writes.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">read</span>(T* data);  <span class="comment">// read one T from FMQ; true if successful.</span></span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">read</span>(T* data, size_t count);  <span class="comment">// Read count T's; no partial reads.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> writeBlocking(<span class="keyword">const</span> T* data, size_t count, int64_t timeOutNanos = <span class="number">0</span>);</span><br><span class="line"><span class="keyword">bool</span> readBlocking(T* data, size_t count, int64_t timeOutNanos = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allows multiple queues to share a single event flag word</span></span><br><span class="line">std::atomic&lt;uint32_t&gt;* getEventFlagWord();</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> writeBlocking(<span class="keyword">const</span> T* data, size_t count, uint32_t readNotification,</span><br><span class="line">uint32_t writeNotification, int64_t timeOutNanos = <span class="number">0</span>,</span><br><span class="line">android::hardware::EventFlag* evFlag = nullptr); <span class="comment">// Blocking write operation for count Ts.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> readBlocking(T* data, size_t count, uint32_t readNotification,</span><br><span class="line">uint32_t writeNotification, int64_t timeOutNanos = <span class="number">0</span>,</span><br><span class="line">android::hardware::EventFlag* evFlag = nullptr) <span class="comment">// Blocking read operation for count Ts;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//APIs to allow zero copy read/write operations</span></span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">beginWrite</span>(size_t nMessages, MemTransaction* memTx) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">bool</span> commitWrite(size_t nMessages);</span><br><span class="line"><span class="keyword">bool</span> beginRead(size_t nMessages, MemTransaction* memTx) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">bool</span> commitRead(size_t nMessages);</span><br></pre></td></tr></table></figure></p><p>availableToWrite() 和 availableToRead() 可用于确定在一次操作中可传输的数据量。在未同步队列中：</p><ul><li><p>availableToWrite() 始终返回队列容量。</p></li><li><p>每个读取器都有自己的读取位置，并会针对 availableToRead() 进行自己的计算。</p></li><li><p>如果是读取速度缓慢的读取器，队列可以溢出，这可能会导致 availableToRead() 返回的值大于队列的大小。发生溢出后进行的第一次读取操作将会失败，并且会导致相应读取器的读取位置被设为等于当前写入指针，无论是否通过 availableToRead() 报告了溢出都是如此。</p></li></ul><p>如果所有请求的数据都可以（并已）传输到队列/从队列传出，则 read() 和 write() 方法会返回 true。这些方法不会阻塞；它们要么成功（并返回 true），要么立即返回失败 (false)。</p><p>readBlocking() 和 writeBlocking() 方法会等到可以完成请求的操作，或等到超时（timeOutNanos 值为 0 表示永不超时）。</p><p>阻塞操作使用事件标记字词来实现。默认情况下，每个队列都会创建并使用自己的标记字词来支持短格式的 readBlocking() 和 writeBlocking()。多个队列可以共用一个字词，这样一来，进程就可以等待对任何队列执行写入或读取操作。可以通过调用 getEventFlagWord() 获得指向队列事件标记字词的指针，此类指针（或任何指向合适的共享内存位置的指针）可用于创建 EventFlag 对象，以传递到其他队列的长格式 readBlocking() 和 writeBlocking()。readNotification 和 writeNotification 参数用于指示事件标记中的哪些位应该用于针对相应队列发出读取和写入信号。readNotification 和 writeNotification 是 32 位的位掩码。</p><p>readBlocking() 会等待 writeNotification 位；如果该参数为 0，则调用一定会失败。如果 readNotification 值为 0，则调用不会失败，但成功的读取操作将不会设置任何通知位。在已同步队列中，这意味着相应的 writeBlocking() 调用一定不会唤醒，除非已在其他位置对相应的位进行设置。在未同步队列中，writeBlocking() 将不会等待（它应仍用于设置写入通知位），而且对于读取操作来说，不适合设置任何通知位。同样，如果 readNotification 为 0，writeblocking() 将会失败，并且成功的写入操作会设置指定的 writeNotification 位。</p><p>要一次等待多个队列，请使用 EventFlag 对象的 wait() 方法来等待通知的位掩码。wait() 方法会返回一个状态字词以及导致系统设置唤醒的位。然后，该信息可用于验证相应的队列是否有足够的控件或数据来完成所需的写入/读取操作，并执行非阻塞 write()/read()。要获取操作后通知，请再次调用 EventFlag 的 wake() 方法。有关 EventFlag 抽象的定义，请参阅<br><a href="https://android.googlesource.com/platform/system/libfmq/+/master/include/fmq/EventFlag.h" target="_blank" rel="noopener">system/libfmq/include/fmq/EventFlag.h</a><br>EventFlag.h内容如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2016 The Android Open Source Project</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HIDL_EVENTFLAG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HIDL_EVENTFLAG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/Errors.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> android &#123;</span><br><span class="line"><span class="keyword">namespace</span> hardware &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * EventFlag is an abstraction that application code utilizing FMQ can use to wait on</span></span><br><span class="line"><span class="comment"> * conditions like full, empty, data available etc. The same EventFlag object</span></span><br><span class="line"><span class="comment"> * can be used with multiple FMQs.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EventFlag</span> &#123;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create an event flag object with mapping information.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param fd File descriptor to be mmapped to create the event flag word.</span></span><br><span class="line"><span class="comment">     * There is no transfer of ownership of the fd. The caller will still</span></span><br><span class="line"><span class="comment">     * own the fd for the purpose of closing it.</span></span><br><span class="line"><span class="comment">     * @param offset Offset parameter to mmap.</span></span><br><span class="line"><span class="comment">     * @param ef Pointer to address of the EventFlag object that gets created. Will be set to</span></span><br><span class="line"><span class="comment">     * nullptr if unsuccesful.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return status Returns a status_t error code. Likely error codes are</span></span><br><span class="line"><span class="comment">     * NO_ERROR if the method is successful or BAD_VALUE due to invalid</span></span><br><span class="line"><span class="comment">     * mapping arguments.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> status_t <span class="title">createEventFlag</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">off_t</span> offset, EventFlag** ef)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create an event flag object from the address of the flag word.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param  efWordPtr Pointer to the event flag word.</span></span><br><span class="line"><span class="comment">     * @param status Returns a status_t error code. Likely error codes are</span></span><br><span class="line"><span class="comment">     * NO_ERROR if the method is successful or BAD_VALUE if efWordPtr is a null</span></span><br><span class="line"><span class="comment">     * pointer.</span></span><br><span class="line"><span class="comment">     * @param ef Pointer to the address of the EventFlag object that gets created. Will be set to</span></span><br><span class="line"><span class="comment">     * nullptr if unsuccesful.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return Returns a status_t error code. Likely error codes are</span></span><br><span class="line"><span class="comment">     * NO_ERROR if the method is successful or BAD_VALUE if efAddr is a null</span></span><br><span class="line"><span class="comment">     * pointer.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> status_t <span class="title">createEventFlag</span><span class="params">(<span class="built_in">std</span>::atomic&lt;<span class="keyword">uint32_t</span>&gt;* efWordPtr,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    EventFlag** ef)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Delete an EventFlag object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param ef A double pointer to the EventFlag object to be destroyed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return Returns a status_t error code. Likely error codes are</span></span><br><span class="line"><span class="comment">     * NO_ERROR if the method is successful or BAD_VALUE due to</span></span><br><span class="line"><span class="comment">     * a bad input parameter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> status_t <span class="title">deleteEventFlag</span><span class="params">(EventFlag** ef)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the specified bits of the event flag word here and wake up a thread.</span></span><br><span class="line"><span class="comment">     * @param bitmask The bits to be set on the event flag word.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return Returns a status_t error code. Likely error codes are</span></span><br><span class="line"><span class="comment">     * NO_ERROR if the method is successful or BAD_VALUE if the bit mask</span></span><br><span class="line"><span class="comment">     * does not have any bits set.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">status_t</span> wake(<span class="keyword">uint32_t</span> bitmask);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Wait for any of the bits in the bit mask to be set.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param bitmask The bits to wait on.</span></span><br><span class="line"><span class="comment">     * @param timeoutNanoSeconds Specifies timeout duration in nanoseconds. It is converted to</span></span><br><span class="line"><span class="comment">     * an absolute timeout for the wait according to the CLOCK_MONOTONIC clock.</span></span><br><span class="line"><span class="comment">     * @param efState The event flag bits that caused the return from wake.</span></span><br><span class="line"><span class="comment">     * @param retry If true, retry automatically for a spurious wake. If false,</span></span><br><span class="line"><span class="comment">     * will return -EINTR or -EAGAIN for a spurious wake.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return Returns a status_t error code. Likely error codes are</span></span><br><span class="line"><span class="comment">     * NO_ERROR if the method is successful, BAD_VALUE due to bad input</span></span><br><span class="line"><span class="comment">     * parameters, TIMED_OUT if the wait timedout as per the timeout</span></span><br><span class="line"><span class="comment">     * parameter, -EAGAIN or -EINTR to indicate that the caller needs to invoke</span></span><br><span class="line"><span class="comment">     * wait() again. -EAGAIN or -EINTR error codes will not be returned if</span></span><br><span class="line"><span class="comment">     * 'retry' is true since the method will retry waiting in that case.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">status_t</span> wait(<span class="keyword">uint32_t</span> bitmask,</span><br><span class="line">                  <span class="keyword">uint32_t</span>* efState,</span><br><span class="line">                  <span class="keyword">int64_t</span> timeOutNanoSeconds = <span class="number">0</span>,</span><br><span class="line">                  <span class="keyword">bool</span> retry = <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">bool</span> mEfWordNeedsUnmapping = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">std</span>::atomic&lt;<span class="keyword">uint32_t</span>&gt;* mEfWordPtr = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * mmap memory for the event flag word.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EventFlag(<span class="keyword">int</span> fd, <span class="keyword">off_t</span> offset, <span class="keyword">status_t</span>* status);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Use this constructor if we already know where the event flag word</span></span><br><span class="line"><span class="comment">     * lives.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EventFlag(<span class="built_in">std</span>::atomic&lt;<span class="keyword">uint32_t</span>&gt;* efWordPtr, <span class="keyword">status_t</span>* status);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Disallow constructor without argument and copying.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EventFlag();</span><br><span class="line">    EventFlag&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> EventFlag&amp; other) = <span class="keyword">delete</span>;</span><br><span class="line">    EventFlag(<span class="keyword">const</span> EventFlag&amp; other) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Wait for any of the bits in the bit mask to be set.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">status_t</span> waitHelper(<span class="keyword">uint32_t</span> bitmask, <span class="keyword">uint32_t</span>* efState, <span class="keyword">int64_t</span> timeOutNanoSeconds);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Utility method to unmap the event flag word.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> status_t <span class="title">unmapEventFlagWord</span><span class="params">(<span class="built_in">std</span>::atomic&lt;<span class="keyword">uint32_t</span>&gt;* efWordPtr,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">bool</span>* efWordNeedsUnmapping)</span></span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Utility method to convert timeout duration to an absolute CLOCK_MONOTONIC</span></span><br><span class="line"><span class="comment">     * clock time which is required by futex syscalls.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addNanosecondsToCurrentTime</span><span class="params">(<span class="keyword">int64_t</span> nanoseconds, struct timespec* timeAbs)</span></span>;</span><br><span class="line">    ~EventFlag();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;  <span class="comment">// namespace hardware</span></span><br><span class="line">&#125;  <span class="comment">// namespace android</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h2 id="零复制操作"><a href="#零复制操作" class="headerlink" title="零复制操作"></a>零复制操作</h2><p>read/write/readBlocking/writeBlocking() API 会将指向输入/输出缓冲区的指针作为参数，并在内部使用 memcpy() 调用，以便在相应缓冲区和 FMQ 环形缓冲区之间复制数据。为了提高性能，Android 8.0 及更高版本包含一组 API，这些 API 可提供对环形缓冲区的直接指针访问，这样便无需使用 memcpy 调用。</p><p>使用以下公共 API 执行零复制 FMQ 操作：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">beginWrite</span><span class="params">(<span class="keyword">size_t</span> nMessages, MemTransaction* memTx)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">commitWrite</span><span class="params">(<span class="keyword">size_t</span> nMessages)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">beginRead</span><span class="params">(<span class="keyword">size_t</span> nMessages, MemTransaction* memTx)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">commitRead</span><span class="params">(<span class="keyword">size_t</span> nMessages)</span></span>;</span><br></pre></td></tr></table></figure></p><ul><li><p>beginWrite 方法负责提供用于访问 FMQ 环形缓冲区的基址指针。在数据写入之后，使用 commitWrite() 提交数据。beginRead/commitRead 方法的运作方式与之相同。</p></li><li><p>beginRead/Write 方法会将要读取/写入的消息条数视为输入，并会返回一个布尔值来指示是否可以执行读取/写入操作。如果可以执行读取或写入操作，则 memTx 结构体中会填入基址指针，这些指针可用于对环形缓冲区共享内存进行直接指针访问。</p></li><li><p>MemRegion 结构体包含有关内存块的详细信息，其中包括基础指针（内存块的基址）和以 T 表示的长度（以 HIDL 定义的消息队列类型表示的内存块长度）。</p></li><li><p>MemTransaction 结构体包含两个 MemRegion 结构体（first 和 second），因为对环形缓冲区执行读取或写入操作时可能需要绕回到队列开头。这意味着，要对 FMQ 环形缓冲区执行数据读取/写入操作，需要两个基址指针。</p></li></ul><p>从 MemRegion 结构体获取基址和长度：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T* <span class="title">getAddress</span><span class="params">()</span></span>; <span class="comment">// gets the base address</span></span><br><span class="line"><span class="keyword">size_t</span> getLength(); <span class="comment">// gets the length of the memory region in terms of T</span></span><br><span class="line"><span class="keyword">size_t</span> getLengthInBytes(); <span class="comment">// gets the length of the memory region in bytes</span></span><br></pre></td></tr></table></figure></p><p>获取对 MemTransaction 对象内的第一个和第二个 MemRegion 的引用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> MemRegion&amp; <span class="title">getFirstRegion</span><span class="params">()</span></span>; <span class="comment">// get a reference to the first MemRegion</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> MemRegion&amp; <span class="title">getSecondRegion</span><span class="params">()</span></span>; <span class="comment">// get a reference to the second MemRegion</span></span><br></pre></td></tr></table></figure></p><p>使用零复制 API 写入 FMQ 的示例：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MessageQueueSync::MemTransaction tx;</span><br><span class="line"><span class="keyword">if</span> (mQueue-&gt;beginRead(dataLen, &amp;tx)) &#123;</span><br><span class="line">    auto <span class="built_in">first</span> = tx.getFirstRegion();</span><br><span class="line">    auto <span class="built_in">second</span> = tx.getSecondRegion();</span><br><span class="line"></span><br><span class="line">    foo(<span class="built_in">first</span>.getAddress(), <span class="built_in">first</span>.getLength()); // <span class="built_in">method</span> that performs the data write</span><br><span class="line">    foo(<span class="built_in">second</span>.getAddress(), <span class="built_in">second</span>.getLength()); // <span class="built_in">method</span> that performs the data write</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(commitWrite(dataLen) == <span class="literal">false</span>) &#123;</span><br><span class="line">       // report <span class="built_in">error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   // report <span class="built_in">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下辅助方法也是 MemTransaction 的一部分：</p><ul><li><p>T* getSlot(size_t idx);<br>返回一个指针，该指针指向属于此 MemTransaction 对象一部分的 MemRegions 内的槽位 idx。如果 MemTransaction 对象表示要读取/写入 N 个类型为 T 的项目的内存区域，则 idx 的有效范围在 0 到 N-1 之间。</p></li><li><p>bool copyTo(const T* data, size_t startIdx, size_t nMessages = 1);<br>将 nMessages 个类型为 T 的项目写入到该对象描述的内存区域，从索引 startIdx 开始。此方法使用 memcpy()，但并非旨在用于零复制操作。如果 MemTransaction 对象表示要读取/写入 N 个类型为 T 的项目的内存区域，则 idx 的有效范围在 0 到 N-1 之间。</p></li><li><p>bool copyFrom(T* data, size_t startIdx, size_t nMessages = 1);<br>一种辅助方法，用于从该对象描述的内存区域读取 nMessages 个类型为 T 的项目，从索引 startIdx 开始。此方法使用 memcpy()，但并非旨在用于零复制操作。</p></li></ul><h2 id="通过-HIDL-发送队列"><a href="#通过-HIDL-发送队列" class="headerlink" title="通过 HIDL 发送队列"></a>通过 HIDL 发送队列</h2><p>在创建侧执行的操作：</p><ol><li>创建消息队列对象，如上所述。</li></ol><ul><li><p>使用 isValid() 验证对象是否有效。</p></li><li><p>如果您要通过将 EventFlag 传递到长格式的 readBlocking()/writeBlocking() 来等待多个队列，则可以从经过初始化的 MessageQueue 对象提取事件标记指针（使用 getEventFlagWord()）以创建标记，然后使用该标记创建必需的 EventFlag 对象。</p></li><li><p>使用 MessageQueue getDesc() 方法获取描述符对象。</p></li><li><p>在 .hal 文件中，为某个方法提供一个类型为 fmq_sync 或 fmq_unsync 的参数，其中 T 是 HIDL 定义的一种合适类型。使用此方法将 getDesc() 返回的对象发送到接收进程。</p></li></ul><p>在接收侧执行的操作：</p><ol><li>使用描述符对象创建 MessageQueue 对象。务必使用相同的队列风格和数据类型，否则将无法编译模板。</li></ol><ul><li>如果您已提取事件标记，则在接收进程中从相应的 MessageQueue 对象提取该标记。</li><li>使用 MessageQueue 对象传输数据。</li></ul><p>google<a href="https://source.android.com/devices/architecture/hidl/fmq?hl=zh-cn" target="_blank" rel="noopener">原文地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Binder机制效率低下，Android HIDL使用FMQ和共享内存来通讯&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.sel4.cn/categories/Android/"/>
    
    
      <category term="HIDL" scheme="http://www.sel4.cn/tags/HIDL/"/>
    
  </entry>
  
  <entry>
    <title>HIDL C++</title>
    <link href="http://www.sel4.cn/2018/01/29/HIDL-C/"/>
    <id>http://www.sel4.cn/2018/01/29/HIDL-C/</id>
    <published>2018-01-29T08:48:50.000Z</published>
    <updated>2018-01-31T13:11:22.786Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Android O上porting HAL，一定要看这个文档<br></blockquote><br><a id="more"></a></p><p>Android O 对 Android 操作系统的架构重新进行了设计，以在独立于设备的 Android 平台与特定于设备和供应商的代码之间定义清晰的接口。Android 已经以 HAL 接口的形式（在 hardware/libhardware 中定义为 C 标头）定义了许多此类接口。HIDL 将这些 HAL 接口替换为稳定的带版本接口，它们可以是采用 C++（如下所述）或 Java 的客户端和服务器端 HIDL 接口。</p><p>本部分中的几页内容介绍了 HIDL 接口的 C++ 实现，其中详细说明了 hidl-gen 编译器基于 HIDL .hal 文件自动生成的文件，这些文件如何打包，以及如何将这些文件与使用它们的 C++ 代码集成。</p><h2 id="客户端和服务器实现"><a href="#客户端和服务器实现" class="headerlink" title="客户端和服务器实现"></a>客户端和服务器实现</h2><p>HIDL 接口具有客户端和服务器实现：</p><ul><li><p>HIDL 接口的客户端实现是指通过在该接口上调用方法来使用该接口的代码。</p></li><li><p>服务器实现是指 HIDL 接口的实现，它可接收来自客户端的调用并返回结果（如有必要）。</p></li></ul><p>在从 libhardware HAL 转换为 HIDL HAL 的过程中，HAL 实现成为服务器，而调用 HAL 的进程则成为客户端。默认实现可提供直通和绑定式 HAL，并可能会随着时间而发生变化：<br><img src="/images/treble_cpp_legacy_hal_progression.png" alt="图 1.旧版 HAL 的发展历程"></p><p>创建 HAL 客户端<br>首先将 HAL 库添加到 makefile 中：</p><ul><li>Make：LOCAL_SHARED_LIBRARIES += android.hardware.nfc@1.0</li><li>Soong：shared_libs: [ …, android.hardware.nfc@1.0 ]</li></ul><p>接下来，添加 HAL 头文件：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/hardware/nfc/1.0/IFoo.h&gt;</span></span></span><br><span class="line">…</span><br><span class="line"><span class="comment">// in code:</span></span><br><span class="line">sp<span class="params">&lt;IFoo&gt;</span> client = <span class="symbol">IFoo::</span>getService();</span><br><span class="line">client-&gt;doThing();</span><br></pre></td></tr></table></figure><h2 id="创建-HAL-服务器"><a href="#创建-HAL-服务器" class="headerlink" title="创建 HAL 服务器"></a>创建 HAL 服务器</h2><p>要创建 HAL 实现，您必须具有表示 HAL 的 .hal 文件并已在 hidl-gen 上使用 -Lmakefile 或 -Landroidbp 为 HAL 生成<br>makefile（./hardware/interfaces/update-makefiles.sh 会为内部 HAL 文件执行这项操作，这是一个很好的参考）。从 libhardware 通过 HAL 传输时，您可以使用 c2hal 轻松完成许多此类工作。</p><p>创建必要的文件来实现您的 HAL：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PACKAGE=android<span class="selector-class">.hardware</span><span class="selector-class">.nfc</span>@<span class="number">1.0</span></span><br><span class="line">LOC=hardware/interfaces/nfc/<span class="number">1.0</span>/default/</span><br><span class="line">make hidl-gen -j64</span><br><span class="line">hidl-gen -o <span class="variable">$LOC</span> -Lc++-impl -randroid<span class="selector-class">.hardware</span>:hardware/interfaces \</span><br><span class="line">    -randroid<span class="selector-class">.hidl</span>:system/libhidl/transport <span class="variable">$PACKAGE</span></span><br><span class="line">hidl-gen -o <span class="variable">$LOC</span> -Landroidbp-impl -randroid<span class="selector-class">.hardware</span>:hardware/interfaces \</span><br><span class="line">    -randroid<span class="selector-class">.hidl</span>:system/libhidl/transport <span class="variable">$PACKAGE</span></span><br></pre></td></tr></table></figure><p>为了让 HAL 在直通模式下发挥作用（对于旧版设备），您必须具有 HIDL_FETCH_IModuleName 函数（位于 /system/lib(64)?/hw/android.hardware.package@3.0-impl($OPTIONAL_IDENTIFIER).so 下），其中 $OPTIONAL_IDENTIFIER 是一个用于标识直通实现的字符串。直通模式要求会通过上述命令自动满足，这些命令也可用于创建 android.hardware.nfc@1.0-impl 目标，但是可以使用扩展。例如，android.hardware.nfc@1.0-impl-foo 就是使用 -foo 来区分它自己。</p><p>接下来，使用相应功能填写存根并设置守护进程。守护进程代码（支持直通）示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hidl/LegacySupport.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> <span class="comment">/* argc */</span>, <span class="keyword">char</span>* <span class="comment">/* argv */</span> [])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> defaultPassthroughServiceImplementation&lt;INfc&gt;(<span class="string">"nfc"</span>);</span><br><span class="line">&#125;</span><br><span class="line">defaultPassthroughServiceImplementation 将对提供的 -impl 库执行 dlopen() 操作，并将其作为绑定式服务提供。守护进程代码（对于纯绑定式服务）示例：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> <span class="comment">/* argc */</span>, <span class="keyword">char</span>* <span class="comment">/* argv */</span> [])</span> </span>&#123;</span><br><span class="line">    Nfc nfc = <span class="keyword">new</span> Nfc();</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">status_t</span> status = nfc-&gt;registerAsService();</span><br><span class="line">    <span class="keyword">if</span> (status != ::android::OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// or handle error</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// join pool or do other things</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此守护进程应该存在于 $PACKAGE + “-service”（例如 android.hardware.nfc@1.0-service）中。HAL 的特定类的 sepolicy 是属性 hal_<module>（例如 hal_nfc)）。您必须将此属性应用到运行特定 HAL 的守护进程（如果同一进程提供多个 HAL，则可以将多个属性应用到该进程）。</module></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Android O上porting HAL，一定要看这个文档&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.sel4.cn/categories/Android/"/>
    
    
      <category term="HIDL" scheme="http://www.sel4.cn/tags/HIDL/"/>
    
  </entry>
  
  <entry>
    <title>Https劫持</title>
    <link href="http://www.sel4.cn/2018/01/23/httpsHijack/"/>
    <id>http://www.sel4.cn/2018/01/23/httpsHijack/</id>
    <published>2018-01-23T07:30:51.000Z</published>
    <updated>2018-02-04T13:22:31.412Z</updated>
    
    <content type="html"><![CDATA[<!-- 未完，将图片只在首页显示<div class="img-topic"><a href="http://www.freebuf.com/news/25532.html" target="_blank" shap></a></div>--><p><img src="/images/fb3a1ec1a208a2891216bedcf263c3cc_r.jpg" width="938" height="626" usemap="#Map1"></p><map name="Map1" id="Map1"><br>    <area shape="rect" coords="0,0,938,626" href="http://www.freebuf.com/news/25532.html" target="_blank" title="freebuf"><br></map><blockquote class="blockquote-center"><br>HTTPS是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL</blockquote><a id="more"></a><p>传统的https是基于PKI体系的，需要公钥和私钥来通信，这里不讨论证书被盗的问题。利用诸如sslstrip之类的技术，这里sslstrip相当于一个代理，你提交的数据都会经过这个代理，sslstrip会将提交的https加密信息转为http进行截获保存，然后在将页面返回给正常用户，显示的是https，这个过程在你肉眼看来是基本无法判断的。</p><h2 id="SSLStrip"><a href="#SSLStrip" class="headerlink" title="SSLStrip"></a>SSLStrip</h2><p>SSLstrip 也叫 https 降级攻击，攻击者拦截用户流量后，欺骗用户与攻击者进行 http 通信，攻击者与服务器保持正常通信 （http 或 https），从而获取用户信息。</p><ul><li>通过中间人攻击监听 http 流量（自己试验可以通过设置 http 代理）</li><li>更改重定向链接中的 location，替换 https 为 http，并记录</li><li>更改响应内容中的超链接，替换 https 为 http，并记录</li><li>与用户进行 http 通信，与服务器进行 https 通信（记录中本应是 https 的请求），从而明文获取用户信息</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol><li>代码获取<br><code>git clone git@github.com:zsky/sslstrip.git</code></li><li>依赖<br>安装 Nodejs</li><li>安装 dsniff<br><code>sudo apt-get install dsniff</code></li><li>安装 nmap<br><code>sudo apt-get install nma</code></li></ol><h2 id="查点"><a href="#查点" class="headerlink" title="查点"></a>查点</h2><pre><code>背景为内网，仅作为演示</code></pre><ol><li><p>扫描主机<br>使用nmap命令扫描局域网，获得主机列表<br>如果所在局域网路由器地址是 192.168.16.1,可以使用 nmap -sP 192.168.16.1/24 扫描<br>-sP 表示使用 ping 方式扫描，192.168.16.1/24”表示扫描”192.168.16.1-192.168.16.254”这个网段的所有机器。</p></li><li><p>开启IP转发<br>ARP欺骗一般目的是把自己伪装成网关，但如果不作处理，当被欺骗数据包到达后就会被本机丢弃（因为本机不是网关，不知道如何处理这类数据包），这当然是不允许的。开启IP转发功能可以解决该问题，IP转发负责把该类数据包再转发给真正的网关处理，开启IP转发的方法：<br><code>echo1 &gt;/proc/sys/net/ipv4/ip_forward</code></p></li><li>ARP 欺骗<br>假设被攻击的 IP 是 192.168.16.134，局域网的网关是 192.168.16.1，攻击电脑使用的网卡接口是 en0(可以使用 ifconfig 命令查看）, 则欺骗命令如下：<br><code>arpspoof -i en0 -t 192.168.16.134 192.168.16.1</code></li><li>数据分析<br>如果 ARP 欺骗成功，则被攻击的设备会把所有数据先传到我们电脑上，接下来可以使用 wireshark 软件来分析数据。至此，中间人攻击完成，接下来可以开始进行 SSLstrip 攻击。</li></ol><p>##　攻击</p><ol><li><p>启动ssltrip<br>命令行进入 sslstrip 程序的根目录，输入命令 node index.js<br>可以看到程序监听的端口号，比如 80</p></li><li><p>将流量导入sslstrip</p></li></ol><ul><li>修改IP转发<br><code>iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 80</code><br>80为sslstrip的监听端口号</li><li>删除记录<br><code>iptables -t nat -D PREROUTING 1</code></li><li>查看ip转发表<br><code>iptables -t nat -L</code></li></ul><ol><li>sslstrip 输出<br>sslstrip会把https的post请求的数据输出到终端</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;!-- 未完，将图片只在首页显示
&lt;div class=&quot;img-topic&quot;&gt;
&lt;a href=&quot;http://www.freebuf.com/news/25532.html&quot; target=&quot;_blank&quot; shap&gt;&lt;/a&gt;
&lt;/div&gt;
--&gt;
&lt;p&gt;&lt;img src=&quot;/images/fb3a1ec1a208a2891216bedcf263c3cc_r.jpg&quot; width=&quot;938&quot; height=&quot;626&quot; usemap=&quot;#Map1&quot;&gt;&lt;/p&gt;
&lt;map name=&quot;Map1&quot; id=&quot;Map1&quot;&gt;&lt;br&gt;    &lt;area shape=&quot;rect&quot; coords=&quot;0,0,938,626&quot; href=&quot;http://www.freebuf.com/news/25532.html&quot; target=&quot;_blank&quot; title=&quot;freebuf&quot;&gt;&lt;br&gt;&lt;/map&gt;

&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;HTTPS是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL&lt;/blockquote&gt;
    
    </summary>
    
      <category term="网络安全" scheme="http://www.sel4.cn/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="HTTPS sslstrip" scheme="http://www.sel4.cn/tags/HTTPS-sslstrip/"/>
    
  </entry>
  
  <entry>
    <title>SecureBoot</title>
    <link href="http://www.sel4.cn/2018/01/22/secureboot/"/>
    <id>http://www.sel4.cn/2018/01/22/secureboot/</id>
    <published>2018-01-22T03:26:58.000Z</published>
    <updated>2018-01-31T13:11:22.786Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"> <p>使一个人值得信任的唯一方法就是信任他。——杰弗逊<br></p></blockquote><br><a id="more"></a><p></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>使一个人值得信任的唯一方法就是信任他，使一台设备值得信任要靠信任链。</p><p>这个信任链要靠层层验证来实现，它的核心是一个证书链：<br><code>rootCA--&gt;attestationCA certificate--&gt;attestationCA</code><br><code>rootCA 保存着给attestationCA certificate验证签名的public key</code><br><code>attestationCA certificate 保存这给attestationCA验证签名的公钥</code><br><code>attestationCA保存着给镜像验证签名的公钥</code><br>rootCA的签名保存在ROM中，设备启动的时候第一阶段Bootloader(它在ROM中)，计算rootCA的签名，和存在ROM中的签名对比，如果相同，那么rootCA有效,以此类推最终验证image.</p><h2 id="UEFI-Secure-Boot"><a href="#UEFI-Secure-Boot" class="headerlink" title="UEFI Secure Boot"></a>UEFI Secure Boot</h2><h3 id="PK"><a href="#PK" class="headerlink" title="PK"></a>PK</h3><p>Platform Key 在平台拥有者和平台固件之间建立可信关系。</p><h3 id="KEK"><a href="#KEK" class="headerlink" title="KEK"></a>KEK</h3><p>Key Exchange Key 包含可信实体的公共证书，这个证书被允许去配置数据库的Allowed和Forbidden</p><h3 id="db-dbx"><a href="#db-dbx" class="headerlink" title="db/dbx"></a>db/dbx</h3><p>Allowed/Forbidden database 包含多个被allowed/disallowed的modules和signed images的可信实体的public certificates</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt; 

&lt;p&gt;使一个人值得信任的唯一方法就是信任他。——杰弗逊&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.sel4.cn/categories/Android/"/>
    
    
      <category term="SecureBoot certlink" scheme="http://www.sel4.cn/tags/SecureBoot-certlink/"/>
    
  </entry>
  
  <entry>
    <title>Android8.0的Selinux</title>
    <link href="http://www.sel4.cn/2018/01/21/Android80Selinux/"/>
    <id>http://www.sel4.cn/2018/01/21/Android80Selinux/</id>
    <published>2018-01-21T09:48:07.000Z</published>
    <updated>2018-01-31T13:11:22.786Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>积极的人在每一次忧患中都看到一个机会， 而消极的人则在每个机会都看到某种忧患<br></blockquote><br><a id="more"></a></p><p>这个文档描述SELinux的修改和定制设计来支持Ａndroid 8.0的SELinux policy的模块化和可更新性。这些修改的目标是让ＳoC和ODM能够彼此独立的定制SELinux的设置</p><p>在Android4.4到7.0版本，SELinux policy的建立流程（build flow）是在code里被分成平台和非平台的２部分，然后在root dir里面生成一个文件.因此这个流程违背了Ａndroid的主要目标，就是各个部分的所有者可以独立更新他们自己那部分的policy,建立他们自己的images,例如vendor.img的维护者修改vendor相关的policy,boot.img的拥有者修改boot相关的policy,他们之间互补干扰。</p><h2 id="Android-8-0的设计目标"><a href="#Android-8-0的设计目标" class="headerlink" title="Ａndroid 8.0的设计目标"></a>Ａndroid 8.0的设计目标</h2><ul><li>Policy ​Modularization</li><li>Policy ​Compatibility</li></ul><p><img src="/images/selinux_arch.png" alt="Android ​partitions"></p><p>● system.img. ​Contains ​mainly ​Android ​framework.</p><p>● boot.img. ​(kernel/ramdisk) ​Contains ​Linux ​kernel ​+ ​Android ​patches.</p><p>● vendor.img. ​Contains ​SoC-specific ​code ​and ​configurations.</p><p>● odm.img. ​Contains ​device-specific ​code ​and ​configurations.</p><p>● oem.img. ​Contains ​OEM/carrier-related ​configurations ​and ​customizations.</p><p>● bootloader. ​Brings ​up ​the ​kernel ​(vendor-proprietary).</p><p>● radio. ​Modem ​(proprietary).<br>在Android8.0之前，vendor,odm,和oem镜像是可选的；在缺省状态下，被编译到这些镜像中的文件,其实被放置到boot.img或者system.img，他们只是符号链接，例如： vendor -&gt; /system/vendor。而在８.0之后这些分区镜像将被强制划分。</p><p>模块化android分区的目的是，使用一组定义在android 平台和制造商代码之间的核心，标准接口，让模块可以各自的被替换。这个标准接口能使android平台在不对SoC和ＯDM分区产生副作用的情况下被更新。例如，可以让设备的system.img从Android 8.0升级到Android P，而其他分区仍然保持Android 8.0。这种模块化的好处是使Ａndroid平台的更新更实时了，因为更新的时候不再需要请求Ｓoc/ODM去更新Ｓoc和设备相关的代码了，例如每个月安全更新。</p><h2 id="Android-8-0-SELinux设计"><a href="#Android-8-0-SELinux设计" class="headerlink" title="Android 8.0 SELinux设计"></a>Android 8.0 SELinux设计</h2><h3 id="First-stage-mount"><a href="#First-stage-mount" class="headerlink" title="First stage mount"></a>First stage mount</h3><p>8.0以前的就不说了,在８.0版本，作为模块化的SELinux policy文件将被存储在各自的分区中，例如vendor里面保存的是vendor的SELinux policy,在设备启动阶段，init进程中必须挂在system和vendor分区，所以它可以读取这些分区中的SELinux 文件，然后把他们合成一个SELinux 文件，并放到system目录下。</p><h3 id="SELinux-上下文标签"><a href="#SELinux-上下文标签" class="headerlink" title="SELinux 上下文标签"></a>SELinux 上下文标签</h3><h4 id="File-contexts"><a href="#File-contexts" class="headerlink" title="File contexts"></a>File contexts</h4><ul><li>为避免在boot阶段额外的编译，file_contexts 不在被放到二进制文件中了，取而代之的是，它们是刻度的，正则的文本文件，像：</li></ul><p><code>｛property,service｝_contexts</code></p><ul><li><p>file_contexts被分割成２个文件：</p><ul><li>Plat_file_contexts<ul><li>Android platform的file_context，它不包含设备相关的labels,除了/vendor分区的必须被精确标记的确保平台相应的功能的labeling parts，例如：sepolicy files</li><li>必须存在于设备上的system分区的/system/etc/selinux/plat_file_contexts目录中，必须要在启动阶段，被init和non-platform file_context一起加载。</li></ul></li><li>Nonplat_file_contexts<ul><li>设备相关的file_context由多个子file_context组合生成，子ile_context在定义在设备的Boardconfig.mk文件中的BOARD_SEPOLICY_DIRS指定的目录下。</li><li>必须被放置在设备vendor分区的/vendor/etc/selinux/nonplat_file_contexts下，必须在设备启动阶段，和platform_file_context一起被init加载。</li></ul></li></ul></li></ul><h4 id="Property-contexts"><a href="#Property-contexts" class="headerlink" title="Property contexts"></a>Property contexts</h4><p>property_contexts和file_contexts一样也是被分成２部分，放置位置和加载规则,yi以及命名规则参考file_contexts<br>原文如下：<br>​the property_contexts ​is ​split ​between ​two ​files:</p><ul><li><p>plat_property_contexts</p><ul><li>Android ​platform property_context ​that ​has ​no ​device-specific ​labels.</li><li>Must ​reside ​in system ​partition ​at /system/etc/selinux/plat_property_contexts ​and ​be ​loaded ​by init ​at the ​start ​along ​with ​the ​non-platform property_contexts.</li></ul></li><li><p>nonplat_property_contexts</p><ul><li>Device-specific property_context ​built ​by ​combining property_contexts found ​in ​the ​directories ​pointed ​to ​by BOARD_SEPOLICY_DIRS ​in ​device’s Boardconfig.mk ​files.</li><li>Must ​reside ​in vendor ​partition ​at /vendor/etc/selinux/nonplat_property_contexts ​and ​be ​loaded ​by init at ​the ​start ​along ​with ​the ​platform property_context</li></ul></li></ul><h4 id="Service-conexts"><a href="#Service-conexts" class="headerlink" title="Service conexts"></a>Service conexts</h4><p>与其他的不同</p><h4 id="seapp-contexts"><a href="#seapp-contexts" class="headerlink" title="seapp contexts"></a>seapp contexts</h4><p>the seapp_contexts ​is ​split ​between ​two ​files:</p><ul><li>plat_seapp_contexts<ul><li>Android ​platform seapp_context ​that ​has ​no ​device-specific ​changes.</li><li>Must ​reside ​in system ​partition ​at /system/etc/selinux/plat_seapp_contexts.</li></ul></li><li>nonplat_seapp_contexts<ul><li>Device-specific ​extension ​to ​platform seapp_context ​built ​by ​combining seapp_contexts ​found ​in ​the ​directories ​pointed ​to ​by BOARD_SEPOLICY_DIRS in ​the ​device’s Boardconfig.mk ​files.</li><li>Must ​reside ​in vendor ​partition ​at /vendor/etc/selinux/nonplat_seapp_contexts.</li></ul></li></ul><h4 id="MAC-permissions"><a href="#MAC-permissions" class="headerlink" title="MAC permissions"></a>MAC permissions</h4><h3 id="对象的所属关系和打标签"><a href="#对象的所属关系和打标签" class="headerlink" title="对象的所属关系和打标签"></a>对象的所属关系和打标签</h3><h4 id="Type-attribute-namespaceing"><a href="#Type-attribute-namespaceing" class="headerlink" title="Type/attribute namespaceing"></a>Type/attribute namespaceing</h4><p> 为了避免重名，非平台相关的声明都要加上前缀”np_”</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type foo, domain; →<span class="built_in"> type </span>np_foo, domain;</span><br></pre></td></tr></table></figure><h4 id="System-​Property-​and-​process-​labeling-​ownership"><a href="#System-​Property-​and-​process-​labeling-​ownership" class="headerlink" title="System ​Property ​and ​process ​labeling ​ownership"></a>System ​Property ​and ​process ​labeling ​ownership</h4><p>  为了避免标签冲突，Vendors应该加上前缀”np_”</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo<span class="selector-class">.xxx</span> → np<span class="selector-class">.foo</span><span class="selector-class">.xxx</span></span><br><span class="line">ro<span class="selector-class">.foo</span><span class="selector-class">.xxx</span> → ro<span class="selector-class">.np</span><span class="selector-class">.foo</span><span class="selector-class">.xxx</span></span><br><span class="line">persist<span class="selector-class">.foo</span><span class="selector-class">.xxx</span> → persist<span class="selector-class">.np</span><span class="selector-class">.foo</span><span class="selector-class">.xxx</span></span><br></pre></td></tr></table></figure><h4 id="File-​ownership"><a href="#File-​ownership" class="headerlink" title="File ​ownership"></a>File ​ownership</h4><ul><li>System(/system)<br>system镜像的labels只能通过file_contexts, service_contexts 等等提供给/system组件。如果给/system组件的标签被添加到了/vendor的policy,那么framework-only OTA升级将是不可能的。</li><li>Vendor(/vendor)</li></ul><p><img src="/images/vender.png" alt="vendor partition Examples"></p><p>单击<a href="https://source.android.com/security/selinux/images/SELinux_Treble.pdf?hl=zh-cn" target="_blank" rel="noopener">Android 8.0 SElinux </a>下载Google官方文档</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;积极的人在每一次忧患中都看到一个机会， 而消极的人则在每个机会都看到某种忧患&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.sel4.cn/categories/Android/"/>
    
    
      <category term="selinux android8.0 MAC" scheme="http://www.sel4.cn/tags/selinux-android8-0-MAC/"/>
    
  </entry>
  
  <entry>
    <title>现代加密</title>
    <link href="http://www.sel4.cn/2018/01/16/ModernEncrypto/"/>
    <id>http://www.sel4.cn/2018/01/16/ModernEncrypto/</id>
    <published>2018-01-16T11:08:56.000Z</published>
    <updated>2018-02-04T13:22:31.412Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"> 希望是典型的人类妄想，它既是人类强大力量的来源，也造就了人类最大的弱点。</blockquote><a id="more"></a><h2 id="1-加密数据"><a href="#1-加密数据" class="headerlink" title="1.加密数据"></a>1.加密数据</h2><h3 id="按照优先级-应该选择"><a href="#按照优先级-应该选择" class="headerlink" title="按照优先级,应该选择:"></a>按照优先级,应该选择:</h3><p>(1)    首选    NaCl库,或者libsodium库,使用里面的crypto_secretbox()/crypto_secretbox_open()    函数<br>(2)    Chacha20-Poly1305    算法    </p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景:"></a>适用场景:</h3><p>当你需要避免把明文数据在网络上传输的时候。<br>以上3种算法,都是AEAD类的算法,AEAD是2015年最好的选择。    其中的(2)和(3)在    结构上类似:一个流<br>加密模式的算法,配合一个多项式结构的MAC.<br>(2)是一个流加密算法,配合一    个为通用cpu优化的MAC算法,对密码学库的实现者来说,Poly1305也比GCM更容易安全地实现。<br>AES-GCM是工业标准(TLS目前主要用的就是AES-GCM),现代CPU通常都有专门为AES-GCM设计的硬件指令,但是在没有硬件指令支持的CPU上(比如32位的arm)<br>(3)性能低于(2)。</p><h3 id="注意避免"><a href="#注意避免" class="headerlink" title="注意避免:"></a>注意避免:</h3><ul><li>避免AES-CBC(说来话长,后文有解释)</li><li>避免AES-CTR</li><li>避免64bit块大小的块加密算法—(说的就是你—BlowFish)</li><li>避免OFB模式</li><li>不要使用RC4,RC4已经被攻破</li></ul><h2 id="2-对称密钥长度"><a href="#2-对称密钥长度" class="headerlink" title="2.对称密钥长度"></a>2.对称密钥长度</h2><p>选择使用256bit长度的密钥</p><h3 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h3><p>只要你在使用密码学，你就应该注意对称密钥长度</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>不要把堆成密钥的Key长度，和非对称加密的key长度搞混了，堆成密钥的key通常比非对称加密的key短很多。</p><p>下表对比了相同安全程度时，不同算法的密钥长度，单位：bit</p><table><thead><tr><th>Symmetric</th><th>ECC</th><th>DH/DSA/RSA</th></tr></thead><tbody><tr><td>80</td><td>163</td><td>1024</td></tr><tr><td>112</td><td>233</td><td>2048</td></tr><tr><td>128</td><td>283</td><td>3072</td></tr><tr><td>192</td><td>409</td><td>7680</td></tr><tr><td>256</td><td>571</td><td>15360</td></tr></tbody></table><h3 id="此外，应该避免"><a href="#此外，应该避免" class="headerlink" title="此外，应该避免"></a>此外，应该避免</h3><ul><li>避免使用巨大key的算法(使用远大于256的key,只能说明使用者没有安全概念)</li><li>避免把多个加密算法串联叠加起来使用,这并没有什么卵用</li><li>避免128bit以下的key长度(比如,哥们求你别再提DES这种56bit密钥的古董了)</li></ul><h2 id="3-对称签名"><a href="#3-对称签名" class="headerlink" title="3.对称签名"></a>3.对称签名</h2><p>应该选择HMAC类的算法</p><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景:"></a>适用场景:</h3><p>安全加固一个API,如各种开放API的调用方认证.<br>如果对一个API,你需要做认证(authenticating),但是不需要做加密(encrypting),记得千万不要自己发明算法,你自己发明的MAC算法基本都有安全漏洞,如果不信,请Google一下    “长度扩展攻击”    (长度扩展攻击Flickr的漏洞案例).<br>同时,必须要注意的是,要使用一个常数时间字符串对比算法(这个地方和码农的常识完全相反,请务必留意)</p><h3 id="此外-应该"><a href="#此外-应该" class="headerlink" title="此外,应该"></a>此外,应该</h3><ul><li>避免自行设计的“带密码的hash”结构,你的设计基本都是有安全漏洞的</li><li>避免HMAC-MD5,避免HMAC-SHA1,使用HMAC-SHA256,    HMAC-SHA512等</li><li>避免复杂的多项式MAC</li><li>避免加密hash值的结构</li><li>避免CRC</li></ul><h2 id="4-Hashing-HMAC算法"><a href="#4-Hashing-HMAC算法" class="headerlink" title="4.Hashing/HMAC算法"></a>4.Hashing/HMAC算法</h2><h3 id="应该选择SHA2类的算法"><a href="#应该选择SHA2类的算法" class="headerlink" title="应该选择SHA2类的算法:"></a>应该选择SHA2类的算法:</h3><p><code>SHA-256,SHA-384,SHA-512,SHA-512/256</code><br>优先使用SHA-512/256,SHA-512/256 这个算法把SHA-512的512bit输出截短到256bit,避开了length    extension 攻击。同时,目前 SHA-2 是很安全可靠的,你不需要升级到 SHA-3 .</p><h3 id="此外-应该-1"><a href="#此外-应该-1" class="headerlink" title="此外,应该"></a>此外,应该</h3><ul><li>避免SHA-1</li><li>避免MD5</li><li>避免MD6</li></ul><h2 id="5-随机ID"><a href="#5-随机ID" class="headerlink" title="5.随机ID"></a>5.随机ID</h2><p>应该使用256    bit的随机值<br>一定要使用/dev/urandom,请认准这个</p><h3 id="此外-应该-2"><a href="#此外-应该-2" class="headerlink" title="此外,应该"></a>此外,应该</h3><ul><li>避免用户空间的随机数生成器如:havaged,prngs,egd等</li><li>避免/dev/random</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt; 希望是典型的人类妄想，它既是人类强大力量的来源，也造就了人类最大的弱点。&lt;/blockquote&gt;
    
    </summary>
    
      <category term="密码学应用" scheme="http://www.sel4.cn/categories/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="security crypto" scheme="http://www.sel4.cn/tags/security-crypto/"/>
    
  </entry>
  
</feed>
